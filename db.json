{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1684829925801},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1684829925801},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1684829925801},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1684829925801},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1684829925801},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1684829925801},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1684829925801},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1684829925801},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1684829925801},{"_id":"themes/next/_config.yml","hash":"7c8c416d2a044a5de9d99832d91ebc09de83536f","modified":1684833509737},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1684829925817},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1684829925835},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1684829925801},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1684829925801},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1684829925801},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1684829925801},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1684829925801},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1684829925801},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1684829925801},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1684829925801},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1684829925801},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1684829925801},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1684829925801},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1684829925801},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1684829925801},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1684829925801},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1684829925801},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1684829925801},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1684829925801},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1684829925817},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1684829925801},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1684829925801},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1684829925817},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1684829925817},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1684829925817},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1684829925817},{"_id":"themes/next/languages/default.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1684829925817},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1684829925817},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1684829925817},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1684829925817},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1684829925817},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1684829925817},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1684829925817},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1684829925817},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1684829925817},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1684829925817},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1684829925817},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1684829925817},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1684829925817},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1684829925817},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1684829925817},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1684829925817},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1684829925817},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1684829925817},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1684829925817},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1684829925835},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1684829925833},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1684829925835},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1684829925835},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1684829925835},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1684829925835},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1684829925835},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1684829925801},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1684829925801},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1684829925801},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1684829925817},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1684829925817},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1684829925817},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1684829925801},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1684829925817},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1684829925817},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1684829925817},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1684829925817},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1684829925817},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1684829925817},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1684829925817},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1684829925817},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1684829925817},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"2e3f046da5d9ab2b6e8ba7373993f94a5a537c19","modified":1684831893568},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1684829925817},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1684829925817},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1684829925817},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1684829925817},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1684829925817},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1684829925817},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1684829925817},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1684829925833},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1684829925833},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1684829925835},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1684829925835},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1684829925835},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1684829925835},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1684829925835},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1684829925835},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1684829925835},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1684829925835},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1684829925835},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1684829925835},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1684829925835},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1684829925835},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1684829925835},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1684829925835},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1684829925835},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1684829925835},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1684829925835},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1684829925835},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1684829925835},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1684829925835},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1684829925835},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1684829925849},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1684829925849},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1684829925849},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684829925849},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1684829925849},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684829925849},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1684829925849},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1684829925849},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1684829925849},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1684829925849},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1684829925849},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1684829925849},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684829925849},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684829925849},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1684829925849},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1684829925849},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1684829925849},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1684829925849},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1684829925849},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1684829925849},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1684829925849},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1684829925849},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1684829925817},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1684829925817},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1684829925817},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1684829925817},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1684829925817},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1684829925817},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1684829925817},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1684829925817},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1684829925817},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1684829925817},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1684829925817},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1684829925817},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1684829925817},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1684829925817},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1684829925817},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1684829925817},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1684829925817},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1684829925817},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1684829925817},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684829925817},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684829925817},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684829925817},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684829925817},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1684829925817},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1684829925817},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1684829925817},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1684829925817},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1684829925817},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1684829925817},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1684829925817},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1684829925817},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1684829925817},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1684829925817},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1684829925817},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1684829925833},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1684829925833},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1684829925833},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1684829925817},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1684829925833},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1684829925833},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1684829925833},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1684829925833},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1684829925833},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1684829925833},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1684829925833},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1684829925833},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1684829925833},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1684829925833},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1684829925835},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1684829925835},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1684829925835},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1684829925835},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1684829925849},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1684829925849},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1684829925849},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1684829925849},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1684829925849},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1684829925849},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1684829925849},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1684829925849},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1684829925849},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1684829925835},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1684829925849},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684829925849},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1684829925849},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1684829925849},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1684829925835},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1684829925835},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1684829925849},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1684829925849},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1684829925849},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1684829925849},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1684829925849},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1684829925849},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1684829925849},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1684829925849},{"_id":"source/_posts/C-STL.md","hash":"c28e55ae82d296cf87e5142793629ed8e09ca83e","modified":1684832665302},{"_id":"source/about/index.md","hash":"ff2e373a71e83af1d0c3fb4d962717819592995b","modified":1684832166881},{"_id":"source/archives/index.md","hash":"711c9584118ded9ecf7125ec480870b00e601cfe","modified":1684832179264},{"_id":"source/_posts/hello-world.md","hash":"0066ed91c6bca4c87a7131e83b301437c290a409","modified":1684833417776},{"_id":"source/lib/bookmark/.eslintignore","hash":"bbd18f176a313f38aafbce58b55ad002563a689b","modified":1684831784910},{"_id":"source/lib/bookmark/README.md","hash":"aef0ed533378c45cadb548e4b26b375e2501fe07","modified":1684831784925},{"_id":"source/tags/index.md","hash":"f7ffb795177e5122070caf7b321811d388a2fa8a","modified":1684832270721},{"_id":"source/lib/bookmark/LICENSE","hash":"c3036598ab8f45797460e48880c9e859268d574a","modified":1684831784910},{"_id":"source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1684831784910},{"_id":"source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1684831784925},{"_id":"source/lib/bookmark/.eslintrc.js","hash":"21e561d7708a2c4884ba0d03f148ce46253b08ad","modified":1684831784910},{"_id":"source/lib/bookmark/index.js","hash":"1364ef511550daf991177d151a5fabc6539fced4","modified":1684831784925},{"_id":"source/lib/bookmark/package.json","hash":"e3eedf4ba6fa086743553176f9526e1bf0b44439","modified":1684831784925},{"_id":"source/lib/bookmark/.git/index","hash":"4b0d78423567ccc25cfd98d60f17df6fec597ba9","modified":1684831784926},{"_id":"source/lib/bookmark/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1684831784925},{"_id":"source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1684831784910},{"_id":"source/lib/bookmark/.git/config","hash":"e2a81a16d3bae1a7d879d132ca6153b9386a4c30","modified":1684831784910},{"_id":"source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1684831783425},{"_id":"source/lib/bookmark/.git/packed-refs","hash":"5133cf40bb12de7e6665640ebaad6c6f6913c693","modified":1684831784910},{"_id":"source/lib/bookmark/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1684831784910},{"_id":"source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1684831783425},{"_id":"source/lib/bookmark/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1684831783425},{"_id":"source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1684831783425},{"_id":"source/lib/bookmark/.git/logs/HEAD","hash":"7e9143fa36e543d092bc885aa874d30531a00422","modified":1684831784910},{"_id":"source/lib/bookmark/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1684831783425},{"_id":"source/lib/bookmark/.git/refs/heads/master","hash":"0ff01610d23a5f9b86dfe1138ddf331d9cd008d1","modified":1684831784910},{"_id":"source/lib/bookmark/.git/objects/pack/pack-61d18fed4c3f5c558e3c43974339591035fbd774.idx","hash":"ba1bb36ec9d2929ddb4b82b25b8db367b4b2b874","modified":1684831784877},{"_id":"source/lib/bookmark/.git/objects/pack/pack-61d18fed4c3f5c558e3c43974339591035fbd774.pack","hash":"45b1abd8249d9ddacfab3ddcc59d65a689ed9f05","modified":1684831784877},{"_id":"source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"7e9143fa36e543d092bc885aa874d30531a00422","modified":1684831784910},{"_id":"source/lib/bookmark/.git/logs/refs/heads/master","hash":"7e9143fa36e543d092bc885aa874d30531a00422","modified":1684831784910},{"_id":"source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1684831784910},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1684834307877},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1684834307877},{"_id":"public/lib/bookmark/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1684834307877},{"_id":"public/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1684834307877},{"_id":"public/archives/index.html","hash":"645e6eeb5165530a9c87efc9e27303448ad4ee58","modified":1684834307877},{"_id":"public/about/index.html","hash":"fbde06ff0189d41e324ffd539991e4c32abd42d6","modified":1684834307877},{"_id":"public/tags/index.html","hash":"c3ec108f7216dc5405b09bed9515d2bf21523e19","modified":1684834307877},{"_id":"public/lib/bookmark/README.html","hash":"90cde545bc35453f421a6eb30bfa8df751b64397","modified":1684834307877},{"_id":"public/archives/2023/index.html","hash":"881d3c6a0191b4f0b62dc98eef7482064e885de4","modified":1684834307877},{"_id":"public/archives/2023/05/index.html","hash":"3c10688aa67f7e9756ab3dc29622812d9707be30","modified":1684834307877},{"_id":"public/tags/hexo/index.html","hash":"51d0f28d2c1c7e7c091b19f5eb84de43a1e9de26","modified":1684834307877},{"_id":"public/tags/C/index.html","hash":"db40e70e6807687f390a334ad0e8700f30e0a8b7","modified":1684834307877},{"_id":"public/2023/05/23/C-STL/index.html","hash":"ca7193a2585ea1b42c0d1e591514d7be0d1a7e02","modified":1684834307877},{"_id":"public/2023/05/23/hello-world/index.html","hash":"cfeb55bdc31d5539fb94106cad5179bb5613a9e7","modified":1684834307877},{"_id":"public/index.html","hash":"20a87e9083344917d3aeabba1d6b92e87ee0ad58","modified":1684834307877},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1684834307877},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684834307877},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1684834307877},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684834307877},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1684834307877},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1684834307877},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1684834307877},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1684834307877},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1684834307877},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684834307877},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1684834307877},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684834307877},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1684834307877},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1684834307877},{"_id":"public/lib/bookmark/LICENSE","hash":"c3036598ab8f45797460e48880c9e859268d574a","modified":1684834307877},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1684834307877},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1684834307877},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1684834307877},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1684834307877},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1684834307877},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1684834307877},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1684834307877},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1684834307877},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1684834307877},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1684834307877},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1684834307877},{"_id":"public/css/main.css","hash":"de362d398dfa61d0f893e8ba0a9414bdb2593b12","modified":1684834307877},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1684834307877},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1684834307877},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1684834307877}],"Category":[],"Data":[],"Page":[{"title":"archives","date":"2023-05-23T08:56:19.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-05-23 16:56:19\n---\n","updated":"2023-05-23T08:56:19.264Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cli02uggb0000i8i9ea3fe563","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-05-23T08:56:06.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-05-23 16:56:06\n---\n","updated":"2023-05-23T08:56:06.881Z","path":"about/index.html","comments":1,"layout":"page","_id":"cli02uggd0001i8i947r20u0k","content":"","site":{"data":{}},"excerpt":"","more":""},{"type":"tags","title":"tags","date":"2023-05-23T08:51:55.000Z","_content":"","source":"tags/index.md","raw":"---\ntype: \"tags\"\ntitle: tags\ndate: 2023-05-23 16:51:55\n---\n","updated":"2023-05-23T08:57:50.721Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cli02ugge0002i8i90l6dat3u","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<h1 align=\"center\">Bookmark for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h2 align=\"center\">Introduce</h2>\n\nBookmark is a plugin that allow the users save their reading position.\n\nThe users could just click the bookmark icon (like 🔖) in left-top of the page to save the position.\n\nAnd when they visit your blog in the next time, they can continue the last reading position by clicking the bookmark icon from the home page.\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\nbookmark: true\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  bookmark: https://cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@latest/bookmark.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/bookmark\n$ git pull\n```\n","source":"lib/bookmark/README.md","raw":"<h1 align=\"center\">Bookmark for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h2 align=\"center\">Introduce</h2>\n\nBookmark is a plugin that allow the users save their reading position.\n\nThe users could just click the bookmark icon (like 🔖) in left-top of the page to save the position.\n\nAnd when they visit your blog in the next time, they can continue the last reading position by clicking the bookmark icon from the home page.\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\nbookmark: true\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  bookmark: https://cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@latest/bookmark.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/bookmark\n$ git pull\n```\n","date":"2023-05-23T08:49:44.925Z","updated":"2023-05-23T08:49:44.925Z","path":"lib/bookmark/README.html","title":"","comments":1,"layout":"page","_id":"cli02uggf0003i8i9gjh225ma","content":"<h1 align=\"center\">Bookmark for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h2 align=\"center\">Introduce</h2>\n\n<p>Bookmark is a plugin that allow the users save their reading position.</p>\n<p>The users could just click the bookmark icon (like 🔖) in left-top of the page to save the position.</p>\n<p>And when they visit your blog in the next time, they can continue the last reading position by clicking the bookmark icon from the home page.</p>\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-bookmark.git <span class=\"built_in\">source</span>/lib/bookmark</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bookmark:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">bookmark:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@latest/bookmark.min.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/source/lib/bookmark</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 align=\"center\">Bookmark for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h2 align=\"center\">Introduce</h2>\n\n<p>Bookmark is a plugin that allow the users save their reading position.</p>\n<p>The users could just click the bookmark icon (like 🔖) in left-top of the page to save the position.</p>\n<p>And when they visit your blog in the next time, they can continue the last reading position by clicking the bookmark icon from the home page.</p>\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-bookmark.git <span class=\"built_in\">source</span>/lib/bookmark</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bookmark:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">bookmark:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@latest/bookmark.min.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/source/lib/bookmark</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n"},{"_content":"!function(o){\"use strict\";var n=o.localStorage;null==n&&(n={getItem:function(){return null},setItem:function(){},removeItem:function(){},clear:function(){}});var t,e=function(){var o=n.getItem(\"bookmark\");if(null==o)return null;try{return JSON.parse(o)}catch(o){return null}},a=function(){var n=o.document.createElement(\"style\");n.type=\"text/css\";var e=\".book-mark-link{border-bottom:none;display:block;position:fixed;color:#222;font-size:26px !important;top:-10px;left:20px;transition:.3s;}.book-mark-link:hover,.book-mark-link-fixed{top:-2px}@media(max-width:1090px){.book-mark-link{display:none}}\";e=o.document.createTextNode(e),n.appendChild(e),o.document.head.appendChild(n),t=$('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>'),$(o.document.body).append(t);var a=0;$(o).on(\"scroll.bookmark\",function(){var n=o.document.documentElement.scrollTop;n>0?0===a&&(t.removeClass(\"book-mark-link-fixed\"),a=n):a>0&&(!t.hasClass(\"book-mark-link-fixed\")&&t.addClass(\"book-mark-link-fixed\"),a=0)})},r=function(e,a){null==a&&(a={});var r=o.document.documentElement.scrollTop;return a.lastUri=e,a[e]=r,n.setItem(\"bookmark\",JSON.stringify(a)),t.animate({top:-26},\"fast\",function(){setTimeout(function(){t.css(\"top\",\"\")},400)}),a};o.bookmark={loadBookmark:function(){var o=e();null!=o&&$(function(){a(),t.attr(\"href\",o.lastUri+\"#book:mark\")})},scrollToMark:function(n,l){var i=o.location.pathname,c=e();$(function(){var e;a(),t.click(function(){return c=r(i,c),!1}),\"auto\"===n&&o.addEventListener(\"beforeunload\",function(){r(i,c)}),null!=c&&([l,\"#comments\"].filter(function(n){return n===o.location.hash}).length>0||(e=c[i],isNaN(e)||$(function(){$(o.document.documentElement).animate({scrollTop:e},\"fast\")})))})}}}(window);","source":"lib/bookmark/bookmark.min.js","raw":"!function(o){\"use strict\";var n=o.localStorage;null==n&&(n={getItem:function(){return null},setItem:function(){},removeItem:function(){},clear:function(){}});var t,e=function(){var o=n.getItem(\"bookmark\");if(null==o)return null;try{return JSON.parse(o)}catch(o){return null}},a=function(){var n=o.document.createElement(\"style\");n.type=\"text/css\";var e=\".book-mark-link{border-bottom:none;display:block;position:fixed;color:#222;font-size:26px !important;top:-10px;left:20px;transition:.3s;}.book-mark-link:hover,.book-mark-link-fixed{top:-2px}@media(max-width:1090px){.book-mark-link{display:none}}\";e=o.document.createTextNode(e),n.appendChild(e),o.document.head.appendChild(n),t=$('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>'),$(o.document.body).append(t);var a=0;$(o).on(\"scroll.bookmark\",function(){var n=o.document.documentElement.scrollTop;n>0?0===a&&(t.removeClass(\"book-mark-link-fixed\"),a=n):a>0&&(!t.hasClass(\"book-mark-link-fixed\")&&t.addClass(\"book-mark-link-fixed\"),a=0)})},r=function(e,a){null==a&&(a={});var r=o.document.documentElement.scrollTop;return a.lastUri=e,a[e]=r,n.setItem(\"bookmark\",JSON.stringify(a)),t.animate({top:-26},\"fast\",function(){setTimeout(function(){t.css(\"top\",\"\")},400)}),a};o.bookmark={loadBookmark:function(){var o=e();null!=o&&$(function(){a(),t.attr(\"href\",o.lastUri+\"#book:mark\")})},scrollToMark:function(n,l){var i=o.location.pathname,c=e();$(function(){var e;a(),t.click(function(){return c=r(i,c),!1}),\"auto\"===n&&o.addEventListener(\"beforeunload\",function(){r(i,c)}),null!=c&&([l,\"#comments\"].filter(function(n){return n===o.location.hash}).length>0||(e=c[i],isNaN(e)||$(function(){$(o.document.documentElement).animate({scrollTop:e},\"fast\")})))})}}}(window);","date":"2023-05-23T08:49:44.925Z","updated":"2023-05-23T08:49:44.925Z","path":"lib/bookmark/bookmark.min.js","layout":"false","title":"","comments":1,"_id":"cli02uggg0004i8i99tik48df","content":"!function(o){\"use strict\";var n=o.localStorage;null==n&&(n={getItem:function(){return null},setItem:function(){},removeItem:function(){},clear:function(){}});var t,e=function(){var o=n.getItem(\"bookmark\");if(null==o)return null;try{return JSON.parse(o)}catch(o){return null}},a=function(){var n=o.document.createElement(\"style\");n.type=\"text/css\";var e=\".book-mark-link{border-bottom:none;display:block;position:fixed;color:#222;font-size:26px !important;top:-10px;left:20px;transition:.3s;}.book-mark-link:hover,.book-mark-link-fixed{top:-2px}@media(max-width:1090px){.book-mark-link{display:none}}\";e=o.document.createTextNode(e),n.appendChild(e),o.document.head.appendChild(n),t=$('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>'),$(o.document.body).append(t);var a=0;$(o).on(\"scroll.bookmark\",function(){var n=o.document.documentElement.scrollTop;n>0?0===a&&(t.removeClass(\"book-mark-link-fixed\"),a=n):a>0&&(!t.hasClass(\"book-mark-link-fixed\")&&t.addClass(\"book-mark-link-fixed\"),a=0)})},r=function(e,a){null==a&&(a={});var r=o.document.documentElement.scrollTop;return a.lastUri=e,a[e]=r,n.setItem(\"bookmark\",JSON.stringify(a)),t.animate({top:-26},\"fast\",function(){setTimeout(function(){t.css(\"top\",\"\")},400)}),a};o.bookmark={loadBookmark:function(){var o=e();null!=o&&$(function(){a(),t.attr(\"href\",o.lastUri+\"#book:mark\")})},scrollToMark:function(n,l){var i=o.location.pathname,c=e();$(function(){var e;a(),t.click(function(){return c=r(i,c),!1}),\"auto\"===n&&o.addEventListener(\"beforeunload\",function(){r(i,c)}),null!=c&&([l,\"#comments\"].filter(function(n){return n===o.location.hash}).length>0||(e=c[i],isNaN(e)||$(function(){$(o.document.documentElement).animate({scrollTop:e},\"fast\")})))})}}}(window);","site":{"data":{}},"excerpt":"","more":"!function(o){\"use strict\";var n=o.localStorage;null==n&&(n={getItem:function(){return null},setItem:function(){},removeItem:function(){},clear:function(){}});var t,e=function(){var o=n.getItem(\"bookmark\");if(null==o)return null;try{return JSON.parse(o)}catch(o){return null}},a=function(){var n=o.document.createElement(\"style\");n.type=\"text/css\";var e=\".book-mark-link{border-bottom:none;display:block;position:fixed;color:#222;font-size:26px !important;top:-10px;left:20px;transition:.3s;}.book-mark-link:hover,.book-mark-link-fixed{top:-2px}@media(max-width:1090px){.book-mark-link{display:none}}\";e=o.document.createTextNode(e),n.appendChild(e),o.document.head.appendChild(n),t=$('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>'),$(o.document.body).append(t);var a=0;$(o).on(\"scroll.bookmark\",function(){var n=o.document.documentElement.scrollTop;n>0?0===a&&(t.removeClass(\"book-mark-link-fixed\"),a=n):a>0&&(!t.hasClass(\"book-mark-link-fixed\")&&t.addClass(\"book-mark-link-fixed\"),a=0)})},r=function(e,a){null==a&&(a={});var r=o.document.documentElement.scrollTop;return a.lastUri=e,a[e]=r,n.setItem(\"bookmark\",JSON.stringify(a)),t.animate({top:-26},\"fast\",function(){setTimeout(function(){t.css(\"top\",\"\")},400)}),a};o.bookmark={loadBookmark:function(){var o=e();null!=o&&$(function(){a(),t.attr(\"href\",o.lastUri+\"#book:mark\")})},scrollToMark:function(n,l){var i=o.location.pathname,c=e();$(function(){var e;a(),t.click(function(){return c=r(i,c),!1}),\"auto\"===n&&o.addEventListener(\"beforeunload\",function(){r(i,c)}),null!=c&&([l,\"#comments\"].filter(function(n){return n===o.location.hash}).length>0||(e=c[i],isNaN(e)||$(function(){$(o.document.documentElement).animate({scrollTop:e},\"fast\")})))})}}}(window);"},{"_content":"(function (global) {\n  'use strict';\n\n  var storage = global.localStorage;\n  if (storage == null) {\n    // if the localStorage is not exists\n    storage = {\n      // eslint-disable-next-line\n      getItem: function () { return null },\n      setItem: function () { },\n      removeItem: function () { },\n      clear: function () { },\n    };\n  }\n\n  // get the saved bookmark object\n  var getBookmark = function () {\n    var mark = storage.getItem('bookmark');\n    if (mark == null) {\n      return null;\n    }\n    try {\n      return JSON.parse(mark);\n    } catch (e) {\n      // invalid object saved in the storage\n      // console.warn('Invalid bookmark object.');\n      return null;\n    }\n  };\n\n  var link;\n  // register everything\n  var init = function () {\n    // bookmark-link style\n    var style = global.document.createElement('style');\n    style.type = 'text/css';\n    var text = '.book-mark-link{'\n      + 'border-bottom:none;'\n      + 'display:block;'\n      + 'position:fixed;'\n      + 'color:#222;'\n      + 'font-size:26px !important;'\n      + 'top:-10px;left:20px;'\n      + 'transition:.3s;'\n      + '}'\n      + '.book-mark-link:hover,.book-mark-link-fixed{top:-2px}'\n      // do not show when the width is not enough\n      + '@media(max-width:1090px){.book-mark-link{display:none}}';\n    text = global.document.createTextNode(text);\n    style.appendChild(text);\n    global.document.head.appendChild(style);\n\n    // create a link element\n    // eslint-disable-next-line max-len\n    link = $('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>');\n    $(global.document.body).append(link);\n\n    var currentTop = 0;\n    // scroll event\n    $(global).on('scroll.bookmark', function () {\n      var top = global.document.documentElement.scrollTop;\n      if (top > 0) {\n        if (currentTop === 0) {\n          link.removeClass('book-mark-link-fixed');\n          currentTop = top;\n        }\n      } else {\n        if (currentTop > 0) {\n          !link.hasClass('book-mark-link-fixed') &&\n            link.addClass('book-mark-link-fixed');\n          currentTop = 0;\n        }\n      }\n    });\n  };\n\n  var loadBookmark = function () {\n    var mark = getBookmark();\n    if (mark == null) {\n      return;\n    }\n    // found the bookmark\n    $(function () {\n      init();\n      link.attr('href', mark.lastUri + '#book:mark');\n    });\n  };\n\n  var doScroll = function (top) {\n    if (!isNaN(top)) {\n      $(function () {\n        // eslint-disable-next-line max-len\n        $(global.document.documentElement).animate({ 'scrollTop': top }, 'fast');\n      });\n    }\n  };\n\n  var doSaveScroll = function (path, mark) {\n    if (mark == null) {\n      mark = {};\n    }\n    var top = global.document.documentElement.scrollTop;\n    mark.lastUri = path;\n    mark[path] = top;\n    storage.setItem('bookmark', JSON.stringify(mark));\n    link.animate({ top: -26 }, 'fast', function () {\n      setTimeout(function () {\n        link.css('top', '');\n      }, 400);\n    });\n    return mark;\n  };\n\n  var scrollToMark = function (trigger, hash) {\n    var path = global.location.pathname;\n    var mark = getBookmark();\n    $(function () {\n      init();\n      // save the position by clicking the icon\n      link.click(function () {\n        mark = doSaveScroll(path, mark);\n        return false;\n      });\n\n      // register beforeunload event when the trigger is auto\n      if (trigger === 'auto') {\n        // register beforeunload event\n        global.addEventListener('beforeunload', function () {\n          doSaveScroll(path, mark);\n        });\n      }\n      // auto scroll to the position\n      if (mark == null) {\n        return;\n      }\n      // and if the page opens with a specific hash, just jump out\n      var skips = [hash, '#comments'];\n      // eslint-disable-next-line\n      if (skips.filter(function (h) { return h === global.location.hash }).length > 0) {\n        return;\n      }\n      doScroll(mark[path]);\n    });\n  };\n\n  global.bookmark = {\n    loadBookmark: loadBookmark,\n    scrollToMark: scrollToMark,\n  };\n})(window);\n","source":"lib/bookmark/index.js","raw":"(function (global) {\n  'use strict';\n\n  var storage = global.localStorage;\n  if (storage == null) {\n    // if the localStorage is not exists\n    storage = {\n      // eslint-disable-next-line\n      getItem: function () { return null },\n      setItem: function () { },\n      removeItem: function () { },\n      clear: function () { },\n    };\n  }\n\n  // get the saved bookmark object\n  var getBookmark = function () {\n    var mark = storage.getItem('bookmark');\n    if (mark == null) {\n      return null;\n    }\n    try {\n      return JSON.parse(mark);\n    } catch (e) {\n      // invalid object saved in the storage\n      // console.warn('Invalid bookmark object.');\n      return null;\n    }\n  };\n\n  var link;\n  // register everything\n  var init = function () {\n    // bookmark-link style\n    var style = global.document.createElement('style');\n    style.type = 'text/css';\n    var text = '.book-mark-link{'\n      + 'border-bottom:none;'\n      + 'display:block;'\n      + 'position:fixed;'\n      + 'color:#222;'\n      + 'font-size:26px !important;'\n      + 'top:-10px;left:20px;'\n      + 'transition:.3s;'\n      + '}'\n      + '.book-mark-link:hover,.book-mark-link-fixed{top:-2px}'\n      // do not show when the width is not enough\n      + '@media(max-width:1090px){.book-mark-link{display:none}}';\n    text = global.document.createTextNode(text);\n    style.appendChild(text);\n    global.document.head.appendChild(style);\n\n    // create a link element\n    // eslint-disable-next-line max-len\n    link = $('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>');\n    $(global.document.body).append(link);\n\n    var currentTop = 0;\n    // scroll event\n    $(global).on('scroll.bookmark', function () {\n      var top = global.document.documentElement.scrollTop;\n      if (top > 0) {\n        if (currentTop === 0) {\n          link.removeClass('book-mark-link-fixed');\n          currentTop = top;\n        }\n      } else {\n        if (currentTop > 0) {\n          !link.hasClass('book-mark-link-fixed') &&\n            link.addClass('book-mark-link-fixed');\n          currentTop = 0;\n        }\n      }\n    });\n  };\n\n  var loadBookmark = function () {\n    var mark = getBookmark();\n    if (mark == null) {\n      return;\n    }\n    // found the bookmark\n    $(function () {\n      init();\n      link.attr('href', mark.lastUri + '#book:mark');\n    });\n  };\n\n  var doScroll = function (top) {\n    if (!isNaN(top)) {\n      $(function () {\n        // eslint-disable-next-line max-len\n        $(global.document.documentElement).animate({ 'scrollTop': top }, 'fast');\n      });\n    }\n  };\n\n  var doSaveScroll = function (path, mark) {\n    if (mark == null) {\n      mark = {};\n    }\n    var top = global.document.documentElement.scrollTop;\n    mark.lastUri = path;\n    mark[path] = top;\n    storage.setItem('bookmark', JSON.stringify(mark));\n    link.animate({ top: -26 }, 'fast', function () {\n      setTimeout(function () {\n        link.css('top', '');\n      }, 400);\n    });\n    return mark;\n  };\n\n  var scrollToMark = function (trigger, hash) {\n    var path = global.location.pathname;\n    var mark = getBookmark();\n    $(function () {\n      init();\n      // save the position by clicking the icon\n      link.click(function () {\n        mark = doSaveScroll(path, mark);\n        return false;\n      });\n\n      // register beforeunload event when the trigger is auto\n      if (trigger === 'auto') {\n        // register beforeunload event\n        global.addEventListener('beforeunload', function () {\n          doSaveScroll(path, mark);\n        });\n      }\n      // auto scroll to the position\n      if (mark == null) {\n        return;\n      }\n      // and if the page opens with a specific hash, just jump out\n      var skips = [hash, '#comments'];\n      // eslint-disable-next-line\n      if (skips.filter(function (h) { return h === global.location.hash }).length > 0) {\n        return;\n      }\n      doScroll(mark[path]);\n    });\n  };\n\n  global.bookmark = {\n    loadBookmark: loadBookmark,\n    scrollToMark: scrollToMark,\n  };\n})(window);\n","date":"2023-05-23T08:49:44.925Z","updated":"2023-05-23T08:49:44.925Z","path":"lib/bookmark/index.js","layout":"false","title":"","comments":1,"_id":"cli02uggj0006i8i9hed1gyaz","content":"(function (global) {\n  'use strict';\n\n  var storage = global.localStorage;\n  if (storage == null) {\n    // if the localStorage is not exists\n    storage = {\n      // eslint-disable-next-line\n      getItem: function () { return null },\n      setItem: function () { },\n      removeItem: function () { },\n      clear: function () { },\n    };\n  }\n\n  // get the saved bookmark object\n  var getBookmark = function () {\n    var mark = storage.getItem('bookmark');\n    if (mark == null) {\n      return null;\n    }\n    try {\n      return JSON.parse(mark);\n    } catch (e) {\n      // invalid object saved in the storage\n      // console.warn('Invalid bookmark object.');\n      return null;\n    }\n  };\n\n  var link;\n  // register everything\n  var init = function () {\n    // bookmark-link style\n    var style = global.document.createElement('style');\n    style.type = 'text/css';\n    var text = '.book-mark-link{'\n      + 'border-bottom:none;'\n      + 'display:block;'\n      + 'position:fixed;'\n      + 'color:#222;'\n      + 'font-size:26px !important;'\n      + 'top:-10px;left:20px;'\n      + 'transition:.3s;'\n      + '}'\n      + '.book-mark-link:hover,.book-mark-link-fixed{top:-2px}'\n      // do not show when the width is not enough\n      + '@media(max-width:1090px){.book-mark-link{display:none}}';\n    text = global.document.createTextNode(text);\n    style.appendChild(text);\n    global.document.head.appendChild(style);\n\n    // create a link element\n    // eslint-disable-next-line max-len\n    link = $('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>');\n    $(global.document.body).append(link);\n\n    var currentTop = 0;\n    // scroll event\n    $(global).on('scroll.bookmark', function () {\n      var top = global.document.documentElement.scrollTop;\n      if (top > 0) {\n        if (currentTop === 0) {\n          link.removeClass('book-mark-link-fixed');\n          currentTop = top;\n        }\n      } else {\n        if (currentTop > 0) {\n          !link.hasClass('book-mark-link-fixed') &&\n            link.addClass('book-mark-link-fixed');\n          currentTop = 0;\n        }\n      }\n    });\n  };\n\n  var loadBookmark = function () {\n    var mark = getBookmark();\n    if (mark == null) {\n      return;\n    }\n    // found the bookmark\n    $(function () {\n      init();\n      link.attr('href', mark.lastUri + '#book:mark');\n    });\n  };\n\n  var doScroll = function (top) {\n    if (!isNaN(top)) {\n      $(function () {\n        // eslint-disable-next-line max-len\n        $(global.document.documentElement).animate({ 'scrollTop': top }, 'fast');\n      });\n    }\n  };\n\n  var doSaveScroll = function (path, mark) {\n    if (mark == null) {\n      mark = {};\n    }\n    var top = global.document.documentElement.scrollTop;\n    mark.lastUri = path;\n    mark[path] = top;\n    storage.setItem('bookmark', JSON.stringify(mark));\n    link.animate({ top: -26 }, 'fast', function () {\n      setTimeout(function () {\n        link.css('top', '');\n      }, 400);\n    });\n    return mark;\n  };\n\n  var scrollToMark = function (trigger, hash) {\n    var path = global.location.pathname;\n    var mark = getBookmark();\n    $(function () {\n      init();\n      // save the position by clicking the icon\n      link.click(function () {\n        mark = doSaveScroll(path, mark);\n        return false;\n      });\n\n      // register beforeunload event when the trigger is auto\n      if (trigger === 'auto') {\n        // register beforeunload event\n        global.addEventListener('beforeunload', function () {\n          doSaveScroll(path, mark);\n        });\n      }\n      // auto scroll to the position\n      if (mark == null) {\n        return;\n      }\n      // and if the page opens with a specific hash, just jump out\n      var skips = [hash, '#comments'];\n      // eslint-disable-next-line\n      if (skips.filter(function (h) { return h === global.location.hash }).length > 0) {\n        return;\n      }\n      doScroll(mark[path]);\n    });\n  };\n\n  global.bookmark = {\n    loadBookmark: loadBookmark,\n    scrollToMark: scrollToMark,\n  };\n})(window);\n","site":{"data":{}},"excerpt":"","more":"(function (global) {\n  'use strict';\n\n  var storage = global.localStorage;\n  if (storage == null) {\n    // if the localStorage is not exists\n    storage = {\n      // eslint-disable-next-line\n      getItem: function () { return null },\n      setItem: function () { },\n      removeItem: function () { },\n      clear: function () { },\n    };\n  }\n\n  // get the saved bookmark object\n  var getBookmark = function () {\n    var mark = storage.getItem('bookmark');\n    if (mark == null) {\n      return null;\n    }\n    try {\n      return JSON.parse(mark);\n    } catch (e) {\n      // invalid object saved in the storage\n      // console.warn('Invalid bookmark object.');\n      return null;\n    }\n  };\n\n  var link;\n  // register everything\n  var init = function () {\n    // bookmark-link style\n    var style = global.document.createElement('style');\n    style.type = 'text/css';\n    var text = '.book-mark-link{'\n      + 'border-bottom:none;'\n      + 'display:block;'\n      + 'position:fixed;'\n      + 'color:#222;'\n      + 'font-size:26px !important;'\n      + 'top:-10px;left:20px;'\n      + 'transition:.3s;'\n      + '}'\n      + '.book-mark-link:hover,.book-mark-link-fixed{top:-2px}'\n      // do not show when the width is not enough\n      + '@media(max-width:1090px){.book-mark-link{display:none}}';\n    text = global.document.createTextNode(text);\n    style.appendChild(text);\n    global.document.head.appendChild(style);\n\n    // create a link element\n    // eslint-disable-next-line max-len\n    link = $('<a class=\"book-mark-link book-mark-link-fixed fa fa-bookmark\" href=\"#\"></a>');\n    $(global.document.body).append(link);\n\n    var currentTop = 0;\n    // scroll event\n    $(global).on('scroll.bookmark', function () {\n      var top = global.document.documentElement.scrollTop;\n      if (top > 0) {\n        if (currentTop === 0) {\n          link.removeClass('book-mark-link-fixed');\n          currentTop = top;\n        }\n      } else {\n        if (currentTop > 0) {\n          !link.hasClass('book-mark-link-fixed') &&\n            link.addClass('book-mark-link-fixed');\n          currentTop = 0;\n        }\n      }\n    });\n  };\n\n  var loadBookmark = function () {\n    var mark = getBookmark();\n    if (mark == null) {\n      return;\n    }\n    // found the bookmark\n    $(function () {\n      init();\n      link.attr('href', mark.lastUri + '#book:mark');\n    });\n  };\n\n  var doScroll = function (top) {\n    if (!isNaN(top)) {\n      $(function () {\n        // eslint-disable-next-line max-len\n        $(global.document.documentElement).animate({ 'scrollTop': top }, 'fast');\n      });\n    }\n  };\n\n  var doSaveScroll = function (path, mark) {\n    if (mark == null) {\n      mark = {};\n    }\n    var top = global.document.documentElement.scrollTop;\n    mark.lastUri = path;\n    mark[path] = top;\n    storage.setItem('bookmark', JSON.stringify(mark));\n    link.animate({ top: -26 }, 'fast', function () {\n      setTimeout(function () {\n        link.css('top', '');\n      }, 400);\n    });\n    return mark;\n  };\n\n  var scrollToMark = function (trigger, hash) {\n    var path = global.location.pathname;\n    var mark = getBookmark();\n    $(function () {\n      init();\n      // save the position by clicking the icon\n      link.click(function () {\n        mark = doSaveScroll(path, mark);\n        return false;\n      });\n\n      // register beforeunload event when the trigger is auto\n      if (trigger === 'auto') {\n        // register beforeunload event\n        global.addEventListener('beforeunload', function () {\n          doSaveScroll(path, mark);\n        });\n      }\n      // auto scroll to the position\n      if (mark == null) {\n        return;\n      }\n      // and if the page opens with a specific hash, just jump out\n      var skips = [hash, '#comments'];\n      // eslint-disable-next-line\n      if (skips.filter(function (h) { return h === global.location.hash }).length > 0) {\n        return;\n      }\n      doScroll(mark[path]);\n    });\n  };\n\n  global.bookmark = {\n    loadBookmark: loadBookmark,\n    scrollToMark: scrollToMark,\n  };\n})(window);\n"},{"_content":"{\n  \"name\": \"theme-next-bookmark\",\n  \"version\": \"1.0.2\",\n  \"description\": \"A plugin of local-bookmarks for NexT theme.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"eslint index.js\",\n    \"dist\": \"eslint index.js && uglifyjs --compress --mangle -o bookmark.min.js -- index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/theme-next/theme-next-bookmark.git\"\n  },\n  \"keywords\": [\n    \"hexo\",\n    \"theme-next\",\n    \"plugin\",\n    \"bookmark\"\n  ],\n  \"author\": \"Tsanie Lily\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/theme-next/theme-next-bookmark/issues\"\n  },\n  \"homepage\": \"https://github.com/theme-next/theme-next-bookmark#readme\",\n  \"devDependencies\": {\n    \"eslint\": \"^4.17.0\",\n    \"eslint-config-google\": \"^0.9.1\",\n    \"uglify-js\": \"^3.3.10\"\n  }\n}\n","source":"lib/bookmark/package.json","raw":"{\n  \"name\": \"theme-next-bookmark\",\n  \"version\": \"1.0.2\",\n  \"description\": \"A plugin of local-bookmarks for NexT theme.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"eslint index.js\",\n    \"dist\": \"eslint index.js && uglifyjs --compress --mangle -o bookmark.min.js -- index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/theme-next/theme-next-bookmark.git\"\n  },\n  \"keywords\": [\n    \"hexo\",\n    \"theme-next\",\n    \"plugin\",\n    \"bookmark\"\n  ],\n  \"author\": \"Tsanie Lily\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/theme-next/theme-next-bookmark/issues\"\n  },\n  \"homepage\": \"https://github.com/theme-next/theme-next-bookmark#readme\",\n  \"devDependencies\": {\n    \"eslint\": \"^4.17.0\",\n    \"eslint-config-google\": \"^0.9.1\",\n    \"uglify-js\": \"^3.3.10\"\n  }\n}\n","date":"2023-05-23T08:49:44.925Z","updated":"2023-05-23T08:49:44.925Z","path":"lib/bookmark/package.json","layout":"false","title":"","comments":1,"_id":"cli02uggm0009i8i92k6e0t7f","content":"{\"name\":\"theme-next-bookmark\",\"version\":\"1.0.2\",\"description\":\"A plugin of local-bookmarks for NexT theme.\",\"main\":\"index.js\",\"scripts\":{\"test\":\"eslint index.js\",\"dist\":\"eslint index.js && uglifyjs --compress --mangle -o bookmark.min.js -- index.js\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/theme-next/theme-next-bookmark.git\"},\"keywords\":[\"hexo\",\"theme-next\",\"plugin\",\"bookmark\"],\"author\":\"Tsanie Lily\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/theme-next/theme-next-bookmark/issues\"},\"homepage\":\"https://github.com/theme-next/theme-next-bookmark#readme\",\"devDependencies\":{\"eslint\":\"^4.17.0\",\"eslint-config-google\":\"^0.9.1\",\"uglify-js\":\"^3.3.10\"}}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"theme-next-bookmark\",\"version\":\"1.0.2\",\"description\":\"A plugin of local-bookmarks for NexT theme.\",\"main\":\"index.js\",\"scripts\":{\"test\":\"eslint index.js\",\"dist\":\"eslint index.js && uglifyjs --compress --mangle -o bookmark.min.js -- index.js\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/theme-next/theme-next-bookmark.git\"},\"keywords\":[\"hexo\",\"theme-next\",\"plugin\",\"bookmark\"],\"author\":\"Tsanie Lily\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/theme-next/theme-next-bookmark/issues\"},\"homepage\":\"https://github.com/theme-next/theme-next-bookmark#readme\",\"devDependencies\":{\"eslint\":\"^4.17.0\",\"eslint-config-google\":\"^0.9.1\",\"uglify-js\":\"^3.3.10\"}}"},{"_content":"{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n","source":"lib/bookmark/renovate.json","raw":"{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n","date":"2023-05-23T08:49:44.925Z","updated":"2023-05-23T08:49:44.925Z","path":"lib/bookmark/renovate.json","layout":"false","title":"","comments":1,"_id":"cli02uggn000ai8i93xp4esi4","content":"{\"extends\":[\"config:base\"]}","site":{"data":{}},"excerpt":"","more":"{\"extends\":[\"config:base\"]}"}],"Post":[{"title":"Hello World","_content":"# Hexo入门以及如何部署到Github\n这篇文章主要介绍了如何在本地快速搭建Hexo框架下的博客以及如何将自己的博客部署到Github上。\n\n## 快速开始\n\n### 安装Hexo\n前提是本地已经安装了npm，然后最好在本地先新建一个文件夹，然后运行下面的命令安装Hexo\n``` bash\n$ npm install hexo-cli -g\n```\n个人是在ubuntu系统下进行的操作，可能直接运行会安装失败，可以尝试在命令前添加sudo\n\n### 安装你的博客\n``` bash\n$ hexo init blog\n$ cd blog\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo generate 或者 hexo g\n```\n\n### 启动服务\n\n``` bash\n$ hexo server 或者 hexo s\n```\n\n在启动服务后你就可以在你的浏览器中输入https://hexo.io/docs/one-command-deployment.html 来预览你的博客了\n\n### 清除文件\n\n``` bash\n$ hexo clean\n```\n\n### 创建新的博文\n\n``` bash\n$ hexo new \"BlogName\"\n```\n\n## 进行自定义操作\n### 更换Hexo默认主题\n#### 下载主题\n\n首先在Github上找到你所喜欢的主题的仓库，git clone主题仓库到你所创建博客的blog/themes文件夹，在这里我选用的是star数最高的next主题\n\n``` bash\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n然后你可以进入到next文件夹下的_config.yml文件下修改参数以达到你想要的主题效果\n\n#### 更换主题\n\n打开博客创建文件夹blog，找到_config.yml文件并打开，修改theme参数\n\n``` bash\ntheme: next\n```\n\n## 部署博客到Github\n### 创建Github仓库\n\n在这里就不展开叙述了，在自己的github账号下创建一个用户名.github.io仓库，网上有很多教程。\n\n### 安装hexo-deployer-git\n\n``` bash\n$ npm install --save hexo-deployer-git\n```\n\n### 修改配置文件\n\n打开博客创建文件夹blog，找到_config.yml文件并打开，添加参数\n\n```\ndeploy:\n\ttype: git\n\trepository: https://github.com/用户名/用户名.github.io.git\n\tbranch: master\n```\n\n### 配置git用户名和邮箱\n\n如果已经配置过，忽略这一步。打开git bash\n\n``` bash\n$ git config --global user.name \"用户名\"\n$ git config --global user.email \"邮箱\"\n```\n\n### 部署博客到github.io仓库\n\n``` bash\n$ hexo d\n```\n\n期间会要求输入你的Github用户名和密码","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: hexo\n---\n# Hexo入门以及如何部署到Github\n这篇文章主要介绍了如何在本地快速搭建Hexo框架下的博客以及如何将自己的博客部署到Github上。\n\n## 快速开始\n\n### 安装Hexo\n前提是本地已经安装了npm，然后最好在本地先新建一个文件夹，然后运行下面的命令安装Hexo\n``` bash\n$ npm install hexo-cli -g\n```\n个人是在ubuntu系统下进行的操作，可能直接运行会安装失败，可以尝试在命令前添加sudo\n\n### 安装你的博客\n``` bash\n$ hexo init blog\n$ cd blog\n```\n\n### 生成静态文件\n\n``` bash\n$ hexo generate 或者 hexo g\n```\n\n### 启动服务\n\n``` bash\n$ hexo server 或者 hexo s\n```\n\n在启动服务后你就可以在你的浏览器中输入https://hexo.io/docs/one-command-deployment.html 来预览你的博客了\n\n### 清除文件\n\n``` bash\n$ hexo clean\n```\n\n### 创建新的博文\n\n``` bash\n$ hexo new \"BlogName\"\n```\n\n## 进行自定义操作\n### 更换Hexo默认主题\n#### 下载主题\n\n首先在Github上找到你所喜欢的主题的仓库，git clone主题仓库到你所创建博客的blog/themes文件夹，在这里我选用的是star数最高的next主题\n\n``` bash\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n然后你可以进入到next文件夹下的_config.yml文件下修改参数以达到你想要的主题效果\n\n#### 更换主题\n\n打开博客创建文件夹blog，找到_config.yml文件并打开，修改theme参数\n\n``` bash\ntheme: next\n```\n\n## 部署博客到Github\n### 创建Github仓库\n\n在这里就不展开叙述了，在自己的github账号下创建一个用户名.github.io仓库，网上有很多教程。\n\n### 安装hexo-deployer-git\n\n``` bash\n$ npm install --save hexo-deployer-git\n```\n\n### 修改配置文件\n\n打开博客创建文件夹blog，找到_config.yml文件并打开，添加参数\n\n```\ndeploy:\n\ttype: git\n\trepository: https://github.com/用户名/用户名.github.io.git\n\tbranch: master\n```\n\n### 配置git用户名和邮箱\n\n如果已经配置过，忽略这一步。打开git bash\n\n``` bash\n$ git config --global user.name \"用户名\"\n$ git config --global user.email \"邮箱\"\n```\n\n### 部署博客到github.io仓库\n\n``` bash\n$ hexo d\n```\n\n期间会要求输入你的Github用户名和密码","slug":"hello-world","published":1,"date":"2023-05-23T08:10:18.842Z","updated":"2023-05-23T09:16:57.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli02uggh0005i8i9c8lab2p5","content":"<h1 id=\"Hexo入门以及如何部署到Github\"><a href=\"#Hexo入门以及如何部署到Github\" class=\"headerlink\" title=\"Hexo入门以及如何部署到Github\"></a>Hexo入门以及如何部署到Github</h1><p>这篇文章主要介绍了如何在本地快速搭建Hexo框架下的博客以及如何将自己的博客部署到Github上。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>前提是本地已经安装了npm，然后最好在本地先新建一个文件夹，然后运行下面的命令安装Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>个人是在ubuntu系统下进行的操作，可能直接运行会安装失败，可以尝试在命令前添加sudo</p>\n<h3 id=\"安装你的博客\"><a href=\"#安装你的博客\" class=\"headerlink\" title=\"安装你的博客\"></a>安装你的博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 或者 hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>\n\n<p>在启动服务后你就可以在你的浏览器中输入<a href=\"https://hexo.io/docs/one-command-deployment.html\">https://hexo.io/docs/one-command-deployment.html</a> 来预览你的博客了</p>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建新的博文\"><a href=\"#创建新的博文\" class=\"headerlink\" title=\"创建新的博文\"></a>创建新的博文</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;BlogName&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进行自定义操作\"><a href=\"#进行自定义操作\" class=\"headerlink\" title=\"进行自定义操作\"></a>进行自定义操作</h2><h3 id=\"更换Hexo默认主题\"><a href=\"#更换Hexo默认主题\" class=\"headerlink\" title=\"更换Hexo默认主题\"></a>更换Hexo默认主题</h3><h4 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h4><p>首先在Github上找到你所喜欢的主题的仓库，git clone主题仓库到你所创建博客的blog&#x2F;themes文件夹，在这里我选用的是star数最高的next主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>然后你可以进入到next文件夹下的_config.yml文件下修改参数以达到你想要的主题效果</p>\n<h4 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h4><p>打开博客创建文件夹blog，找到_config.yml文件并打开，修改theme参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署博客到Github\"><a href=\"#部署博客到Github\" class=\"headerlink\" title=\"部署博客到Github\"></a>部署博客到Github</h2><h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><p>在这里就不展开叙述了，在自己的github账号下创建一个用户名.github.io仓库，网上有很多教程。</p>\n<h3 id=\"安装hexo-deployer-git\"><a href=\"#安装hexo-deployer-git\" class=\"headerlink\" title=\"安装hexo-deployer-git\"></a>安装hexo-deployer-git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>打开博客创建文件夹blog，找到_config.yml文件并打开，添加参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepository: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置git用户名和邮箱\"><a href=\"#配置git用户名和邮箱\" class=\"headerlink\" title=\"配置git用户名和邮箱\"></a>配置git用户名和邮箱</h3><p>如果已经配置过，忽略这一步。打开git bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;用户名&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署博客到github-io仓库\"><a href=\"#部署博客到github-io仓库\" class=\"headerlink\" title=\"部署博客到github.io仓库\"></a>部署博客到github.io仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>期间会要求输入你的Github用户名和密码</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo入门以及如何部署到Github\"><a href=\"#Hexo入门以及如何部署到Github\" class=\"headerlink\" title=\"Hexo入门以及如何部署到Github\"></a>Hexo入门以及如何部署到Github</h1><p>这篇文章主要介绍了如何在本地快速搭建Hexo框架下的博客以及如何将自己的博客部署到Github上。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>前提是本地已经安装了npm，然后最好在本地先新建一个文件夹，然后运行下面的命令安装Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>个人是在ubuntu系统下进行的操作，可能直接运行会安装失败，可以尝试在命令前添加sudo</p>\n<h3 id=\"安装你的博客\"><a href=\"#安装你的博客\" class=\"headerlink\" title=\"安装你的博客\"></a>安装你的博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 或者 hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>\n\n<p>在启动服务后你就可以在你的浏览器中输入<a href=\"https://hexo.io/docs/one-command-deployment.html\">https://hexo.io/docs/one-command-deployment.html</a> 来预览你的博客了</p>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建新的博文\"><a href=\"#创建新的博文\" class=\"headerlink\" title=\"创建新的博文\"></a>创建新的博文</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;BlogName&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进行自定义操作\"><a href=\"#进行自定义操作\" class=\"headerlink\" title=\"进行自定义操作\"></a>进行自定义操作</h2><h3 id=\"更换Hexo默认主题\"><a href=\"#更换Hexo默认主题\" class=\"headerlink\" title=\"更换Hexo默认主题\"></a>更换Hexo默认主题</h3><h4 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h4><p>首先在Github上找到你所喜欢的主题的仓库，git clone主题仓库到你所创建博客的blog&#x2F;themes文件夹，在这里我选用的是star数最高的next主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>然后你可以进入到next文件夹下的_config.yml文件下修改参数以达到你想要的主题效果</p>\n<h4 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h4><p>打开博客创建文件夹blog，找到_config.yml文件并打开，修改theme参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署博客到Github\"><a href=\"#部署博客到Github\" class=\"headerlink\" title=\"部署博客到Github\"></a>部署博客到Github</h2><h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><p>在这里就不展开叙述了，在自己的github账号下创建一个用户名.github.io仓库，网上有很多教程。</p>\n<h3 id=\"安装hexo-deployer-git\"><a href=\"#安装hexo-deployer-git\" class=\"headerlink\" title=\"安装hexo-deployer-git\"></a>安装hexo-deployer-git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>打开博客创建文件夹blog，找到_config.yml文件并打开，添加参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepository: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置git用户名和邮箱\"><a href=\"#配置git用户名和邮箱\" class=\"headerlink\" title=\"配置git用户名和邮箱\"></a>配置git用户名和邮箱</h3><p>如果已经配置过，忽略这一步。打开git bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;用户名&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署博客到github-io仓库\"><a href=\"#部署博客到github-io仓库\" class=\"headerlink\" title=\"部署博客到github.io仓库\"></a>部署博客到github.io仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>期间会要求输入你的Github用户名和密码</p>\n"},{"title":"C++STL","date":"2023-05-23T09:03:11.000Z","_content":"\n# C++11 语言特性\n## 1.1 nullptr和std::nullptr_t\nC++11允许你使用nullptr取代0或者NULL，用来表示一个pointer（指针）指向no value。例如：\n```C++\nvoid f(int);\nvoid f(void*);\nf(0);           // call f(int)\nf(NULL);        // call f(int) if NULL is 0 ambigous otherwise\nf(nullptr);     // call f(void*)\n```\nnullptr会被自动转换成各种pointer类型，但不会被转换成任何整数类型\n\n## 1.2 以auto完成类型自动推导\n### auto类型推导\n```C++\nauto x = 5;                 // 正确，x是int类型\nauto pi = new auto(1);      // 正确，p是int*\nconst auto* v = &x, u = 6;  // 正确，v是const int*类型，u是const int\nstatic auto y = 0.0;        // 正确，y是double类型\nauto int r;                 // 错误，auto不在表示存储类型的指示符\nauto s;                     // 错误，auto无法推导出s的类型（必须马上初始化）\n```\nauto并不能代表一个实际的类型声明（上面s编译错误），只是一个声明类型的“占位符”。使用auto声明的变量必须马上初始化，让编译器推断出它的类型，并且在编译时将auto占位符替换成真正的类型。\n\n### auto推导规则\n```C++\nint x = 0;\nauto *a = &x;           // a -> int*，a被推导为int*\nauto b = &x;            // b -> int，b被推导为int，忽略了引用\nauto &c = x;            // c -> int&，c被推导为int&\nauto d = c;             // d -> int，d被推导为int，忽略了引用\nconst auto e = x;       // e -> const int\nauto f = e;             // f -> int\nconst auto& g = x;      // g -> const int&\nauto& h = g;            // h -> const int&\n```\n在不声明为引用或者指针时，auto会忽略等号右边的引用类型和const限定\n在声明为引用或者指针时，auto会保留等号右边的引用和const属性\n\n### auto的限制\n1. auto的使用必须马上初始化，否则无法推导出类型\n2. auto在一行定义多个变量时，各个变量不能产生二义性，否则编译失败\n3. auto不能用作函数的参数\n4. 在类中auto不能用作非静态成员变量\n5. auto不能定义数组，可以定义指针\n6. auto无法推断出模板参数\n\n## 1.3 decltype用于推导表达式类型\ndecltype用于推导表达式类型，这里只用于编译器分析表达式的类型，表达式实际不会进行运算\n```C++\nint func() { return 0; }\ndecltype(func()) i;     // i为int类型\nint x = 0;\ndecltype(x) y;          // y为int类型\ndecltype(x + y) z;      // z为int类型\n```\n注意：decltype不会像auto一样忽略引用和const属性，decltype会保留表达式引用和cv属性\n\n### decltype推导规则\n1. exp是表达式，decltype(exp)和exp类型相同\n2. exp是函数调用，decltype(exp)和函数返回值类型相同\n3. 其他情况，若exp是左值，decltype(exp)是exp的左值引用\n\n### auto和decltype配合使用\n```C++\ntemplate<typename T, typename U>\nreturn_value add(T t, U u) {\n    // t和u类型不确定，无法推导出return_value类型\n    return t + u\n}\n```\n改进为\n```C++\ntemplate<typename T, typename U>\nauto add(T t, U u) -> decltype(t + u) {\n    return t + u\n}\n```\n\n## 1.4 一致性初始化与初值列\n### 一致性初始化\n面对任何初始化动作，可以用大括号进行初始化\n```C++\nint values[] {1, 2 ,3};\nstd::vector<int> v {2, 3, 5, 7, 11, 13, 17};\nstd::vector<std::string> cities {\"beijing\", \"location\", \"cario\"};\n```\n\n### 初值列\n即使某个local变量属于某种基础类型，也会被初始化为0或者nullptr（如果是个指针）\n```C++\nint i;      // i has undefined value\nint j{};    // j is initalized by 0\nint *p;     // p has undefined value\nint *q{};   // j is initalized by nullptr\n```\n注意：窄化--精度降低或造成数值变动，对大括号而言是不成立的\n```C++\nint x1(5.3);                            // ok, x1 -> 5\nint x2 = 5.3;                           // ok, x2 -> 5\nint x3{5.0};                            // error\nint x4 = {5.0};                         // error\nchar c1{7};                             // ok\nchar c2{99999};                         // error\nstd::vector<int> {1, 2, 3, 4, 5};       // ok\nstd::vector<int> {1, 2, 3, 4, 5};       // error\n```\n\n### std::initalizer_list<>\n`initalizer_list<>`用来支持（a list of value）进行初始化 \\\n\n实例1：\n```C++\nvoid print(std::initalizer_list<int> vals) {\n    for (auto p = vals.begin(); p != vals.end(); ++p) {\n        std::cout << *p << ' ';\n    }\n}\nprint({12, 3, 4, 5, 6, 7, 8});\n```\n\n实例2：\n```C++\nclass P {\n    public:\n    P(int, int);\n    P(std::initalizer_list<int>);\n};\nP p{77, 5};         // Calls P::P(int, int)\nP q{77, 5};         // Calls P::P(initalizer_list)\nP r{77, 5, 42};     // Calls P::P(initalizer_list)\nP s = {77, 5, 42};  // Calls P::P(initalizer_list)\n```\n\n实例3：\\\nexplicit构造函数如果接受的是一个初值列，会失去初值列带有0个，1个，多个初值的能力\n```C++\nclass P {\n    public:\n    P(int, int);\n    explicit P(std::initalizer_list<int>);\n};\nP p{77, 5};         // ok\nP q{77, 5};         // ok\nP r{77, 5, 42};     // ok\nP s = {77, 5, 42};  // error\nP s = {77, 5}       // ok\n```\n\n## 1.5 Range-Based for循环（foreach循环）\n语法特性：\n```C++\nfor (decl : coll) { // decl是给定值coll集合中每一个元素的声明\n    statement\n}\n\nfor (int i : {2, 3, 5, 7, 9, 13, 17, 19}) {\n    std::cout << i << std::endl;\n}\n\nstd::vector<double> vec;\nfor (auto& elem : vec) {\n    elem *= 3;\n}\n\n// 打印某集合内所有元素的泛型函数实例\ntemplate<typename T>\nvoid printElements(const T& coll) {\n    for (const auto& elem : coll) {\n        std::cout << elem << std::endl;\n    }\n}\n```\n\n可以针对初值列使用range-based for循环，因为class template std::initalizer_list<>提供了成员函数begin()和end()\n```C++\nint array[] = {1, 2, 3, 4, 5};\nlong sum = 0;\nfor (int x : array) {\n    sum += x;\n}\nfor (auto elem : {sum, sum * 2, sum * 4} {\n    std::cout << elem << std::endl;\n})\n```\n\n\n## 1.6 move语义和左值引用\n###为何需要移动语义\n假设有如下代码：\n```C++\nvector<string> vstr;\n// build up a vector of 20,000 strings, each of 1000 characters\n...\nvector<string> vstr_copy1(vstr); // make vstr_copy1 a copy of vstr\n```\nvector和string类都使用了动态内存分配，因此它们必须定义某种new版本的复制构造函数，为初始化对象vstr_copy1，复制构造函数vector<string>将使用new给20000个string对象分配内存，而每个string对象又将调用string的复制构造函数，该构造函数使用new为1000个字符分配内存。接下来全部20000*1000个字符都将从vstr控制的内存中复制到vstr_copy1控制的内存中\n\n假设以下面方式使用它：\n```C++\nvector<string> vstrl\n// build up a vector of 20,000 strings, each of 1000 characters\nvector<string> vstr_copy1(vstr);\nvector<string> vstr_copy2(allcaps(vstr));\n```\n从表面上看，两个复制一致，它们都使用了一个现有的对象初始化一个vector<string>对象，如果深入探索这些代码，将发现allcaps()创建了对象temp，该对象管理着20000*1000个字符，vector和string的复制构造函数创建这20000*1000个字符的副本，然后程序删除allcaps()返回临时对象。（这里做了很多无用功）\n\n### 使用移动语义\n编译器对数据的所有权直接转让给vstr_copy2，不进行新的复制副本，在删除副本；而是将字符留在原来的地方，并将vstr_copy2与之相关联\n\n### 如何实现移动语义\n使用右值引用，让编译器知道什么时候需要复制，什么时候不需要\n\n方法：使用移动构造函数，它使用右值引用作为参数，该引用关联到右值实参 \\\n注意1：复制构造函数可执行深复制，而移动构造函数只调整记录 \\\n注意2：在将所有权转移给新对象的过程中，移动构造函数可能修改其实参，这意味着右值引用参数不应该是const\n```C++\n#include <iostream>\nusing namespace std;\n\nclass Useless {\n    private:\n    int n;\n    char *pc;\n    static int ct;\n    void ShowObject() const;\n    \n    public:\n    Useless();\n    explicit Useless(int k);\n    Useless(int k, char ch);\n    Useless(const Useless &f);\n    Useless(Useless &&f);\n    ~Useless();\n    Useless operator+(const Useless &f) const;\n    void ShowData() const;\n}\n\nint Useless::ct = 0;\n\nUseless::Useless {\n    ++ct;\n    n = 0;\n    pc = nullptr;\n    ShowObject();\n}\n\nUseless::Useless(int k) : n(k) {\n    ++ct;\n    pc = new char[n];\n    ShowObject();\n}\n\nUseless::Useless(const Useless& f) : n(f.n) {\n    ++ct;\n    pc = new char[n];\n    for (int i = 0; i < n; i++) {\n        pc[i] = ch;\n    }\n    ShowObject();\n}\n\nUseless::Useless(Useless&& f) : n(f.n) {\n    ++ct;\n    pc = f.pc;\n    f.pc = nullptr;\n    for (int i = 0; i < n; i++) {\n        pc[i] =  ch;\n    }\n    ShowObject();\n}\n\nUseless::~Useless() {\n    cout << \"destructor called; objects left: \" << --ct << endl;\n    cout << \"deleted object:\\n\";\n    ShowObject();\n    delete []pc;\n}\n\nUseless Useless::operator+(const Useless& f) const {\n    cout << \"Entering operator+()\\n\";\n    Useless temp = Useless(n + f.n);\n    for (int i = 0; i < n; i++) {\n        pc[i] =  ch;\n    }\n    for (int i = 0; i < temp; i++) {\n        temp.pc[i] = f.pc[i - n];\n    }\n    cout << \"temp object:\\n\";\n    cout << \"Leaving operator+()\\n\";\n    return temp;\n}\n```\n两种构造函数比较\n\n复制构造函数：\n```C++\nUseless::Useless(const Useless& f) : n(f.n) {\n    ++ct;\n    pc = new char[n];\n    for (int i = 0; i < n; i++) {\n        pc[i] = ch;\n    }\n}\n```\n移动构造函数：\n```C++\nUseless::Useless(const Useless&& f) : n(f.n) {\n    ++ct;\n    pc = f.pc;\n    f.pc = nullptr;\n    f.n = 0;\n}\n```\n\n它让pc指向现有的数据，以获取这些数据的所有权，此时pc和f.pc指向相同的数据，调用析构函数时将带来麻烦，因为程序不能对同一个地址调用delete两次，为避免这个问题该构造函数将原来的指针设置为空指针（对空指针执行delete[]没有问题）\n\n由于修改了f对象，这要求不能在参数声明中使用const","source":"_posts/C-STL.md","raw":"---\ntitle: C++STL\ndate: 2023-05-23 17:03:11\ntags: C++\n---\n\n# C++11 语言特性\n## 1.1 nullptr和std::nullptr_t\nC++11允许你使用nullptr取代0或者NULL，用来表示一个pointer（指针）指向no value。例如：\n```C++\nvoid f(int);\nvoid f(void*);\nf(0);           // call f(int)\nf(NULL);        // call f(int) if NULL is 0 ambigous otherwise\nf(nullptr);     // call f(void*)\n```\nnullptr会被自动转换成各种pointer类型，但不会被转换成任何整数类型\n\n## 1.2 以auto完成类型自动推导\n### auto类型推导\n```C++\nauto x = 5;                 // 正确，x是int类型\nauto pi = new auto(1);      // 正确，p是int*\nconst auto* v = &x, u = 6;  // 正确，v是const int*类型，u是const int\nstatic auto y = 0.0;        // 正确，y是double类型\nauto int r;                 // 错误，auto不在表示存储类型的指示符\nauto s;                     // 错误，auto无法推导出s的类型（必须马上初始化）\n```\nauto并不能代表一个实际的类型声明（上面s编译错误），只是一个声明类型的“占位符”。使用auto声明的变量必须马上初始化，让编译器推断出它的类型，并且在编译时将auto占位符替换成真正的类型。\n\n### auto推导规则\n```C++\nint x = 0;\nauto *a = &x;           // a -> int*，a被推导为int*\nauto b = &x;            // b -> int，b被推导为int，忽略了引用\nauto &c = x;            // c -> int&，c被推导为int&\nauto d = c;             // d -> int，d被推导为int，忽略了引用\nconst auto e = x;       // e -> const int\nauto f = e;             // f -> int\nconst auto& g = x;      // g -> const int&\nauto& h = g;            // h -> const int&\n```\n在不声明为引用或者指针时，auto会忽略等号右边的引用类型和const限定\n在声明为引用或者指针时，auto会保留等号右边的引用和const属性\n\n### auto的限制\n1. auto的使用必须马上初始化，否则无法推导出类型\n2. auto在一行定义多个变量时，各个变量不能产生二义性，否则编译失败\n3. auto不能用作函数的参数\n4. 在类中auto不能用作非静态成员变量\n5. auto不能定义数组，可以定义指针\n6. auto无法推断出模板参数\n\n## 1.3 decltype用于推导表达式类型\ndecltype用于推导表达式类型，这里只用于编译器分析表达式的类型，表达式实际不会进行运算\n```C++\nint func() { return 0; }\ndecltype(func()) i;     // i为int类型\nint x = 0;\ndecltype(x) y;          // y为int类型\ndecltype(x + y) z;      // z为int类型\n```\n注意：decltype不会像auto一样忽略引用和const属性，decltype会保留表达式引用和cv属性\n\n### decltype推导规则\n1. exp是表达式，decltype(exp)和exp类型相同\n2. exp是函数调用，decltype(exp)和函数返回值类型相同\n3. 其他情况，若exp是左值，decltype(exp)是exp的左值引用\n\n### auto和decltype配合使用\n```C++\ntemplate<typename T, typename U>\nreturn_value add(T t, U u) {\n    // t和u类型不确定，无法推导出return_value类型\n    return t + u\n}\n```\n改进为\n```C++\ntemplate<typename T, typename U>\nauto add(T t, U u) -> decltype(t + u) {\n    return t + u\n}\n```\n\n## 1.4 一致性初始化与初值列\n### 一致性初始化\n面对任何初始化动作，可以用大括号进行初始化\n```C++\nint values[] {1, 2 ,3};\nstd::vector<int> v {2, 3, 5, 7, 11, 13, 17};\nstd::vector<std::string> cities {\"beijing\", \"location\", \"cario\"};\n```\n\n### 初值列\n即使某个local变量属于某种基础类型，也会被初始化为0或者nullptr（如果是个指针）\n```C++\nint i;      // i has undefined value\nint j{};    // j is initalized by 0\nint *p;     // p has undefined value\nint *q{};   // j is initalized by nullptr\n```\n注意：窄化--精度降低或造成数值变动，对大括号而言是不成立的\n```C++\nint x1(5.3);                            // ok, x1 -> 5\nint x2 = 5.3;                           // ok, x2 -> 5\nint x3{5.0};                            // error\nint x4 = {5.0};                         // error\nchar c1{7};                             // ok\nchar c2{99999};                         // error\nstd::vector<int> {1, 2, 3, 4, 5};       // ok\nstd::vector<int> {1, 2, 3, 4, 5};       // error\n```\n\n### std::initalizer_list<>\n`initalizer_list<>`用来支持（a list of value）进行初始化 \\\n\n实例1：\n```C++\nvoid print(std::initalizer_list<int> vals) {\n    for (auto p = vals.begin(); p != vals.end(); ++p) {\n        std::cout << *p << ' ';\n    }\n}\nprint({12, 3, 4, 5, 6, 7, 8});\n```\n\n实例2：\n```C++\nclass P {\n    public:\n    P(int, int);\n    P(std::initalizer_list<int>);\n};\nP p{77, 5};         // Calls P::P(int, int)\nP q{77, 5};         // Calls P::P(initalizer_list)\nP r{77, 5, 42};     // Calls P::P(initalizer_list)\nP s = {77, 5, 42};  // Calls P::P(initalizer_list)\n```\n\n实例3：\\\nexplicit构造函数如果接受的是一个初值列，会失去初值列带有0个，1个，多个初值的能力\n```C++\nclass P {\n    public:\n    P(int, int);\n    explicit P(std::initalizer_list<int>);\n};\nP p{77, 5};         // ok\nP q{77, 5};         // ok\nP r{77, 5, 42};     // ok\nP s = {77, 5, 42};  // error\nP s = {77, 5}       // ok\n```\n\n## 1.5 Range-Based for循环（foreach循环）\n语法特性：\n```C++\nfor (decl : coll) { // decl是给定值coll集合中每一个元素的声明\n    statement\n}\n\nfor (int i : {2, 3, 5, 7, 9, 13, 17, 19}) {\n    std::cout << i << std::endl;\n}\n\nstd::vector<double> vec;\nfor (auto& elem : vec) {\n    elem *= 3;\n}\n\n// 打印某集合内所有元素的泛型函数实例\ntemplate<typename T>\nvoid printElements(const T& coll) {\n    for (const auto& elem : coll) {\n        std::cout << elem << std::endl;\n    }\n}\n```\n\n可以针对初值列使用range-based for循环，因为class template std::initalizer_list<>提供了成员函数begin()和end()\n```C++\nint array[] = {1, 2, 3, 4, 5};\nlong sum = 0;\nfor (int x : array) {\n    sum += x;\n}\nfor (auto elem : {sum, sum * 2, sum * 4} {\n    std::cout << elem << std::endl;\n})\n```\n\n\n## 1.6 move语义和左值引用\n###为何需要移动语义\n假设有如下代码：\n```C++\nvector<string> vstr;\n// build up a vector of 20,000 strings, each of 1000 characters\n...\nvector<string> vstr_copy1(vstr); // make vstr_copy1 a copy of vstr\n```\nvector和string类都使用了动态内存分配，因此它们必须定义某种new版本的复制构造函数，为初始化对象vstr_copy1，复制构造函数vector<string>将使用new给20000个string对象分配内存，而每个string对象又将调用string的复制构造函数，该构造函数使用new为1000个字符分配内存。接下来全部20000*1000个字符都将从vstr控制的内存中复制到vstr_copy1控制的内存中\n\n假设以下面方式使用它：\n```C++\nvector<string> vstrl\n// build up a vector of 20,000 strings, each of 1000 characters\nvector<string> vstr_copy1(vstr);\nvector<string> vstr_copy2(allcaps(vstr));\n```\n从表面上看，两个复制一致，它们都使用了一个现有的对象初始化一个vector<string>对象，如果深入探索这些代码，将发现allcaps()创建了对象temp，该对象管理着20000*1000个字符，vector和string的复制构造函数创建这20000*1000个字符的副本，然后程序删除allcaps()返回临时对象。（这里做了很多无用功）\n\n### 使用移动语义\n编译器对数据的所有权直接转让给vstr_copy2，不进行新的复制副本，在删除副本；而是将字符留在原来的地方，并将vstr_copy2与之相关联\n\n### 如何实现移动语义\n使用右值引用，让编译器知道什么时候需要复制，什么时候不需要\n\n方法：使用移动构造函数，它使用右值引用作为参数，该引用关联到右值实参 \\\n注意1：复制构造函数可执行深复制，而移动构造函数只调整记录 \\\n注意2：在将所有权转移给新对象的过程中，移动构造函数可能修改其实参，这意味着右值引用参数不应该是const\n```C++\n#include <iostream>\nusing namespace std;\n\nclass Useless {\n    private:\n    int n;\n    char *pc;\n    static int ct;\n    void ShowObject() const;\n    \n    public:\n    Useless();\n    explicit Useless(int k);\n    Useless(int k, char ch);\n    Useless(const Useless &f);\n    Useless(Useless &&f);\n    ~Useless();\n    Useless operator+(const Useless &f) const;\n    void ShowData() const;\n}\n\nint Useless::ct = 0;\n\nUseless::Useless {\n    ++ct;\n    n = 0;\n    pc = nullptr;\n    ShowObject();\n}\n\nUseless::Useless(int k) : n(k) {\n    ++ct;\n    pc = new char[n];\n    ShowObject();\n}\n\nUseless::Useless(const Useless& f) : n(f.n) {\n    ++ct;\n    pc = new char[n];\n    for (int i = 0; i < n; i++) {\n        pc[i] = ch;\n    }\n    ShowObject();\n}\n\nUseless::Useless(Useless&& f) : n(f.n) {\n    ++ct;\n    pc = f.pc;\n    f.pc = nullptr;\n    for (int i = 0; i < n; i++) {\n        pc[i] =  ch;\n    }\n    ShowObject();\n}\n\nUseless::~Useless() {\n    cout << \"destructor called; objects left: \" << --ct << endl;\n    cout << \"deleted object:\\n\";\n    ShowObject();\n    delete []pc;\n}\n\nUseless Useless::operator+(const Useless& f) const {\n    cout << \"Entering operator+()\\n\";\n    Useless temp = Useless(n + f.n);\n    for (int i = 0; i < n; i++) {\n        pc[i] =  ch;\n    }\n    for (int i = 0; i < temp; i++) {\n        temp.pc[i] = f.pc[i - n];\n    }\n    cout << \"temp object:\\n\";\n    cout << \"Leaving operator+()\\n\";\n    return temp;\n}\n```\n两种构造函数比较\n\n复制构造函数：\n```C++\nUseless::Useless(const Useless& f) : n(f.n) {\n    ++ct;\n    pc = new char[n];\n    for (int i = 0; i < n; i++) {\n        pc[i] = ch;\n    }\n}\n```\n移动构造函数：\n```C++\nUseless::Useless(const Useless&& f) : n(f.n) {\n    ++ct;\n    pc = f.pc;\n    f.pc = nullptr;\n    f.n = 0;\n}\n```\n\n它让pc指向现有的数据，以获取这些数据的所有权，此时pc和f.pc指向相同的数据，调用析构函数时将带来麻烦，因为程序不能对同一个地址调用delete两次，为避免这个问题该构造函数将原来的指针设置为空指针（对空指针执行delete[]没有问题）\n\n由于修改了f对象，这要求不能在参数声明中使用const","slug":"C-STL","published":1,"updated":"2023-05-23T09:04:25.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli02uggk0007i8i9dwm683hq","content":"<h1 id=\"C-11-语言特性\"><a href=\"#C-11-语言特性\" class=\"headerlink\" title=\"C++11 语言特性\"></a>C++11 语言特性</h1><h2 id=\"1-1-nullptr和std-nullptr-t\"><a href=\"#1-1-nullptr和std-nullptr-t\" class=\"headerlink\" title=\"1.1 nullptr和std::nullptr_t\"></a>1.1 nullptr和std::nullptr_t</h2><p>C++11允许你使用nullptr取代0或者NULL，用来表示一个pointer（指针）指向no value。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">void</span>*)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"number\">0</span>);           <span class=\"comment\">// call f(int)</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"literal\">NULL</span>);        <span class=\"comment\">// call f(int) if NULL is 0 ambigous otherwise</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"literal\">nullptr</span>);     <span class=\"comment\">// call f(void*)</span></span><br></pre></td></tr></table></figure>\n<p>nullptr会被自动转换成各种pointer类型，但不会被转换成任何整数类型</p>\n<h2 id=\"1-2-以auto完成类型自动推导\"><a href=\"#1-2-以auto完成类型自动推导\" class=\"headerlink\" title=\"1.2 以auto完成类型自动推导\"></a>1.2 以auto完成类型自动推导</h2><h3 id=\"auto类型推导\"><a href=\"#auto类型推导\" class=\"headerlink\" title=\"auto类型推导\"></a>auto类型推导</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> x = <span class=\"number\">5</span>;                 <span class=\"comment\">// 正确，x是int类型</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pi = <span class=\"keyword\">new</span> <span class=\"built_in\">auto</span>(<span class=\"number\">1</span>);      <span class=\"comment\">// 正确，p是int*</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span>* v = &amp;x, u = <span class=\"number\">6</span>;  <span class=\"comment\">// 正确，v是const int*类型，u是const int</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">auto</span> y = <span class=\"number\">0.0</span>;        <span class=\"comment\">// 正确，y是double类型</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> <span class=\"type\">int</span> r;                 <span class=\"comment\">// 错误，auto不在表示存储类型的指示符</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> s;                     <span class=\"comment\">// 错误，auto无法推导出s的类型（必须马上初始化）</span></span><br></pre></td></tr></table></figure>\n<p>auto并不能代表一个实际的类型声明（上面s编译错误），只是一个声明类型的“占位符”。使用auto声明的变量必须马上初始化，让编译器推断出它的类型，并且在编译时将auto占位符替换成真正的类型。</p>\n<h3 id=\"auto推导规则\"><a href=\"#auto推导规则\" class=\"headerlink\" title=\"auto推导规则\"></a>auto推导规则</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> *a = &amp;x;           <span class=\"comment\">// a -&gt; int*，a被推导为int*</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> b = &amp;x;            <span class=\"comment\">// b -&gt; int，b被推导为int，忽略了引用</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;c = x;            <span class=\"comment\">// c -&gt; int&amp;，c被推导为int&amp;</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> d = c;             <span class=\"comment\">// d -&gt; int，d被推导为int，忽略了引用</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> e = x;       <span class=\"comment\">// e -&gt; const int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = e;             <span class=\"comment\">// f -&gt; int</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; g = x;      <span class=\"comment\">// g -&gt; const int&amp;</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span>&amp; h = g;            <span class=\"comment\">// h -&gt; const int&amp;</span></span><br></pre></td></tr></table></figure>\n<p>在不声明为引用或者指针时，auto会忽略等号右边的引用类型和const限定<br>在声明为引用或者指针时，auto会保留等号右边的引用和const属性</p>\n<h3 id=\"auto的限制\"><a href=\"#auto的限制\" class=\"headerlink\" title=\"auto的限制\"></a>auto的限制</h3><ol>\n<li>auto的使用必须马上初始化，否则无法推导出类型</li>\n<li>auto在一行定义多个变量时，各个变量不能产生二义性，否则编译失败</li>\n<li>auto不能用作函数的参数</li>\n<li>在类中auto不能用作非静态成员变量</li>\n<li>auto不能定义数组，可以定义指针</li>\n<li>auto无法推断出模板参数</li>\n</ol>\n<h2 id=\"1-3-decltype用于推导表达式类型\"><a href=\"#1-3-decltype用于推导表达式类型\" class=\"headerlink\" title=\"1.3 decltype用于推导表达式类型\"></a>1.3 decltype用于推导表达式类型</h2><p>decltype用于推导表达式类型，这里只用于编译器分析表达式的类型，表达式实际不会进行运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(<span class=\"built_in\">func</span>()) i;     <span class=\"comment\">// i为int类型</span></span><br><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(x) y;          <span class=\"comment\">// y为int类型</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(x + y) z;      <span class=\"comment\">// z为int类型</span></span><br></pre></td></tr></table></figure>\n<p>注意：decltype不会像auto一样忽略引用和const属性，decltype会保留表达式引用和cv属性</p>\n<h3 id=\"decltype推导规则\"><a href=\"#decltype推导规则\" class=\"headerlink\" title=\"decltype推导规则\"></a>decltype推导规则</h3><ol>\n<li>exp是表达式，decltype(exp)和exp类型相同</li>\n<li>exp是函数调用，decltype(exp)和函数返回值类型相同</li>\n<li>其他情况，若exp是左值，decltype(exp)是exp的左值引用</li>\n</ol>\n<h3 id=\"auto和decltype配合使用\"><a href=\"#auto和decltype配合使用\" class=\"headerlink\" title=\"auto和decltype配合使用\"></a>auto和decltype配合使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\">return_value <span class=\"title\">add</span><span class=\"params\">(T t, U u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// t和u类型不确定，无法推导出return_value类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t + u</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改进为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T t, U u)</span> -&gt; <span class=\"title\">decltype</span><span class=\"params\">(t + u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t + u</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-一致性初始化与初值列\"><a href=\"#1-4-一致性初始化与初值列\" class=\"headerlink\" title=\"1.4 一致性初始化与初值列\"></a>1.4 一致性初始化与初值列</h2><h3 id=\"一致性初始化\"><a href=\"#一致性初始化\" class=\"headerlink\" title=\"一致性初始化\"></a>一致性初始化</h3><p>面对任何初始化动作，可以用大括号进行初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> values[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span> ,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; v &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">std::vector&lt;std::string&gt; cities &#123;<span class=\"string\">&quot;beijing&quot;</span>, <span class=\"string\">&quot;location&quot;</span>, <span class=\"string\">&quot;cario&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初值列\"><a href=\"#初值列\" class=\"headerlink\" title=\"初值列\"></a>初值列</h3><p>即使某个local变量属于某种基础类型，也会被初始化为0或者nullptr（如果是个指针）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i;      <span class=\"comment\">// i has undefined value</span></span><br><span class=\"line\"><span class=\"type\">int</span> j&#123;&#125;;    <span class=\"comment\">// j is initalized by 0</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p;     <span class=\"comment\">// p has undefined value</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q&#123;&#125;;   <span class=\"comment\">// j is initalized by nullptr</span></span><br></pre></td></tr></table></figure>\n<p>注意：窄化–精度降低或造成数值变动，对大括号而言是不成立的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">x1</span><span class=\"params\">(<span class=\"number\">5.3</span>)</span></span>;                            <span class=\"comment\">// ok, x1 -&gt; 5</span></span><br><span class=\"line\"><span class=\"type\">int</span> x2 = <span class=\"number\">5.3</span>;                           <span class=\"comment\">// ok, x2 -&gt; 5</span></span><br><span class=\"line\"><span class=\"type\">int</span> x3&#123;<span class=\"number\">5.0</span>&#125;;                            <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"type\">int</span> x4 = &#123;<span class=\"number\">5.0</span>&#125;;                         <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"type\">char</span> c1&#123;<span class=\"number\">7</span>&#125;;                             <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"type\">char</span> c2&#123;<span class=\"number\">99999</span>&#125;;                         <span class=\"comment\">// error</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;       <span class=\"comment\">// ok</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;       <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"std-initalizer-list-lt-gt\"><a href=\"#std-initalizer-list-lt-gt\" class=\"headerlink\" title=\"std::initalizer_list&lt;&gt;\"></a>std::initalizer_list&lt;&gt;</h3><p><code>initalizer_list&lt;&gt;</code>用来支持（a list of value）进行初始化 \\</p>\n<p>实例1：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(std::initalizer_list&lt;<span class=\"type\">int</span>&gt; vals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = vals.<span class=\"built_in\">begin</span>(); p != vals.<span class=\"built_in\">end</span>(); ++p) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; *p &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(&#123;<span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>实例2：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(std::initalizer_list&lt;<span class=\"type\">int</span>&gt;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">P p&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// Calls P::P(int, int)</span></span><br><span class=\"line\">P q&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br><span class=\"line\">P r&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;     <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;  <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br></pre></td></tr></table></figure>\n\n<p>实例3：<br>explicit构造函数如果接受的是一个初值列，会失去初值列带有0个，1个，多个初值的能力</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">P</span><span class=\"params\">(std::initalizer_list&lt;<span class=\"type\">int</span>&gt;)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">P p&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// ok</span></span><br><span class=\"line\">P q&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// ok</span></span><br><span class=\"line\">P r&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;     <span class=\"comment\">// ok</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;  <span class=\"comment\">// error</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;       <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-Range-Based-for循环（foreach循环）\"><a href=\"#1-5-Range-Based-for循环（foreach循环）\" class=\"headerlink\" title=\"1.5 Range-Based for循环（foreach循环）\"></a>1.5 Range-Based for循环（foreach循环）</h2><p>语法特性：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (decl : coll) &#123; <span class=\"comment\">// decl是给定值coll集合中每一个元素的声明</span></span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>&#125;) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">double</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; elem : vec) &#123;</span><br><span class=\"line\">    elem *= <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印某集合内所有元素的泛型函数实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printElements</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; coll)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; elem : coll) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以针对初值列使用range-based for循环，因为class template std::initalizer_list&lt;&gt;提供了成员函数begin()和end()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> array[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : array) &#123;</span><br><span class=\"line\">    sum += x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> elem : &#123;sum, sum * <span class=\"number\">2</span>, sum * <span class=\"number\">4</span>&#125; &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1-6-move语义和左值引用\"><a href=\"#1-6-move语义和左值引用\" class=\"headerlink\" title=\"1.6 move语义和左值引用\"></a>1.6 move语义和左值引用</h2><p>###为何需要移动语义<br>假设有如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; vstr;</span><br><span class=\"line\"><span class=\"comment\">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy1</span><span class=\"params\">(vstr)</span></span>; <span class=\"comment\">// make vstr_copy1 a copy of vstr</span></span><br></pre></td></tr></table></figure>\n<p>vector和string类都使用了动态内存分配，因此它们必须定义某种new版本的复制构造函数，为初始化对象vstr_copy1，复制构造函数vector<string>将使用new给20000个string对象分配内存，而每个string对象又将调用string的复制构造函数，该构造函数使用new为1000个字符分配内存。接下来全部20000*1000个字符都将从vstr控制的内存中复制到vstr_copy1控制的内存中</p>\n<p>假设以下面方式使用它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; vstrl</span><br><span class=\"line\"><span class=\"comment\">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy1</span><span class=\"params\">(vstr)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy2</span><span class=\"params\">(allcaps(vstr))</span></span>;</span><br></pre></td></tr></table></figure>\n<p>从表面上看，两个复制一致，它们都使用了一个现有的对象初始化一个vector<string>对象，如果深入探索这些代码，将发现allcaps()创建了对象temp，该对象管理着20000<em>1000个字符，vector和string的复制构造函数创建这20000</em>1000个字符的副本，然后程序删除allcaps()返回临时对象。（这里做了很多无用功）</p>\n<h3 id=\"使用移动语义\"><a href=\"#使用移动语义\" class=\"headerlink\" title=\"使用移动语义\"></a>使用移动语义</h3><p>编译器对数据的所有权直接转让给vstr_copy2，不进行新的复制副本，在删除副本；而是将字符留在原来的地方，并将vstr_copy2与之相关联</p>\n<h3 id=\"如何实现移动语义\"><a href=\"#如何实现移动语义\" class=\"headerlink\" title=\"如何实现移动语义\"></a>如何实现移动语义</h3><p>使用右值引用，让编译器知道什么时候需要复制，什么时候不需要</p>\n<p>方法：使用移动构造函数，它使用右值引用作为参数，该引用关联到右值实参 <br>注意1：复制构造函数可执行深复制，而移动构造函数只调整记录 <br>注意2：在将所有权转移给新对象的过程中，移动构造函数可能修改其实参，这意味着右值引用参数不应该是const</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Useless</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">char</span> *pc;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> ct;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowObject</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Useless</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(<span class=\"type\">int</span> k, <span class=\"type\">char</span> ch);</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless &amp;f);</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(Useless &amp;&amp;f);</span><br><span class=\"line\">    ~<span class=\"built_in\">Useless</span>();</span><br><span class=\"line\">    Useless <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Useless &amp;f) <span class=\"type\">const</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowData</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Useless::ct = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::Useless &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">int</span> k) : <span class=\"built_in\">n</span>(k) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] = ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(Useless&amp;&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = f.pc;</span><br><span class=\"line\">    f.pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] =  ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::~<span class=\"built_in\">Useless</span>() &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;destructor called; objects left: &quot;</span> &lt;&lt; --ct &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;deleted object:\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless Useless::<span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Useless&amp; f) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Entering operator+()\\n&quot;</span>;</span><br><span class=\"line\">    Useless temp = <span class=\"built_in\">Useless</span>(n + f.n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] =  ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; temp; i++) &#123;</span><br><span class=\"line\">        temp.pc[i] = f.pc[i - n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;temp object:\\n&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Leaving operator+()\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种构造函数比较</p>\n<p>复制构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] = ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>移动构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp;&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = f.pc;</span><br><span class=\"line\">    f.pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    f.n = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它让pc指向现有的数据，以获取这些数据的所有权，此时pc和f.pc指向相同的数据，调用析构函数时将带来麻烦，因为程序不能对同一个地址调用delete两次，为避免这个问题该构造函数将原来的指针设置为空指针（对空指针执行delete[]没有问题）</p>\n<p>由于修改了f对象，这要求不能在参数声明中使用const</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-11-语言特性\"><a href=\"#C-11-语言特性\" class=\"headerlink\" title=\"C++11 语言特性\"></a>C++11 语言特性</h1><h2 id=\"1-1-nullptr和std-nullptr-t\"><a href=\"#1-1-nullptr和std-nullptr-t\" class=\"headerlink\" title=\"1.1 nullptr和std::nullptr_t\"></a>1.1 nullptr和std::nullptr_t</h2><p>C++11允许你使用nullptr取代0或者NULL，用来表示一个pointer（指针）指向no value。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">void</span>*)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"number\">0</span>);           <span class=\"comment\">// call f(int)</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"literal\">NULL</span>);        <span class=\"comment\">// call f(int) if NULL is 0 ambigous otherwise</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>(<span class=\"literal\">nullptr</span>);     <span class=\"comment\">// call f(void*)</span></span><br></pre></td></tr></table></figure>\n<p>nullptr会被自动转换成各种pointer类型，但不会被转换成任何整数类型</p>\n<h2 id=\"1-2-以auto完成类型自动推导\"><a href=\"#1-2-以auto完成类型自动推导\" class=\"headerlink\" title=\"1.2 以auto完成类型自动推导\"></a>1.2 以auto完成类型自动推导</h2><h3 id=\"auto类型推导\"><a href=\"#auto类型推导\" class=\"headerlink\" title=\"auto类型推导\"></a>auto类型推导</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> x = <span class=\"number\">5</span>;                 <span class=\"comment\">// 正确，x是int类型</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pi = <span class=\"keyword\">new</span> <span class=\"built_in\">auto</span>(<span class=\"number\">1</span>);      <span class=\"comment\">// 正确，p是int*</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span>* v = &amp;x, u = <span class=\"number\">6</span>;  <span class=\"comment\">// 正确，v是const int*类型，u是const int</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">auto</span> y = <span class=\"number\">0.0</span>;        <span class=\"comment\">// 正确，y是double类型</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> <span class=\"type\">int</span> r;                 <span class=\"comment\">// 错误，auto不在表示存储类型的指示符</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> s;                     <span class=\"comment\">// 错误，auto无法推导出s的类型（必须马上初始化）</span></span><br></pre></td></tr></table></figure>\n<p>auto并不能代表一个实际的类型声明（上面s编译错误），只是一个声明类型的“占位符”。使用auto声明的变量必须马上初始化，让编译器推断出它的类型，并且在编译时将auto占位符替换成真正的类型。</p>\n<h3 id=\"auto推导规则\"><a href=\"#auto推导规则\" class=\"headerlink\" title=\"auto推导规则\"></a>auto推导规则</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> *a = &amp;x;           <span class=\"comment\">// a -&gt; int*，a被推导为int*</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> b = &amp;x;            <span class=\"comment\">// b -&gt; int，b被推导为int，忽略了引用</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;c = x;            <span class=\"comment\">// c -&gt; int&amp;，c被推导为int&amp;</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> d = c;             <span class=\"comment\">// d -&gt; int，d被推导为int，忽略了引用</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> e = x;       <span class=\"comment\">// e -&gt; const int</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = e;             <span class=\"comment\">// f -&gt; int</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; g = x;      <span class=\"comment\">// g -&gt; const int&amp;</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span>&amp; h = g;            <span class=\"comment\">// h -&gt; const int&amp;</span></span><br></pre></td></tr></table></figure>\n<p>在不声明为引用或者指针时，auto会忽略等号右边的引用类型和const限定<br>在声明为引用或者指针时，auto会保留等号右边的引用和const属性</p>\n<h3 id=\"auto的限制\"><a href=\"#auto的限制\" class=\"headerlink\" title=\"auto的限制\"></a>auto的限制</h3><ol>\n<li>auto的使用必须马上初始化，否则无法推导出类型</li>\n<li>auto在一行定义多个变量时，各个变量不能产生二义性，否则编译失败</li>\n<li>auto不能用作函数的参数</li>\n<li>在类中auto不能用作非静态成员变量</li>\n<li>auto不能定义数组，可以定义指针</li>\n<li>auto无法推断出模板参数</li>\n</ol>\n<h2 id=\"1-3-decltype用于推导表达式类型\"><a href=\"#1-3-decltype用于推导表达式类型\" class=\"headerlink\" title=\"1.3 decltype用于推导表达式类型\"></a>1.3 decltype用于推导表达式类型</h2><p>decltype用于推导表达式类型，这里只用于编译器分析表达式的类型，表达式实际不会进行运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(<span class=\"built_in\">func</span>()) i;     <span class=\"comment\">// i为int类型</span></span><br><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(x) y;          <span class=\"comment\">// y为int类型</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(x + y) z;      <span class=\"comment\">// z为int类型</span></span><br></pre></td></tr></table></figure>\n<p>注意：decltype不会像auto一样忽略引用和const属性，decltype会保留表达式引用和cv属性</p>\n<h3 id=\"decltype推导规则\"><a href=\"#decltype推导规则\" class=\"headerlink\" title=\"decltype推导规则\"></a>decltype推导规则</h3><ol>\n<li>exp是表达式，decltype(exp)和exp类型相同</li>\n<li>exp是函数调用，decltype(exp)和函数返回值类型相同</li>\n<li>其他情况，若exp是左值，decltype(exp)是exp的左值引用</li>\n</ol>\n<h3 id=\"auto和decltype配合使用\"><a href=\"#auto和decltype配合使用\" class=\"headerlink\" title=\"auto和decltype配合使用\"></a>auto和decltype配合使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\">return_value <span class=\"title\">add</span><span class=\"params\">(T t, U u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// t和u类型不确定，无法推导出return_value类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t + u</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改进为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T t, U u)</span> -&gt; <span class=\"title\">decltype</span><span class=\"params\">(t + u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t + u</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-一致性初始化与初值列\"><a href=\"#1-4-一致性初始化与初值列\" class=\"headerlink\" title=\"1.4 一致性初始化与初值列\"></a>1.4 一致性初始化与初值列</h2><h3 id=\"一致性初始化\"><a href=\"#一致性初始化\" class=\"headerlink\" title=\"一致性初始化\"></a>一致性初始化</h3><p>面对任何初始化动作，可以用大括号进行初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> values[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span> ,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; v &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">std::vector&lt;std::string&gt; cities &#123;<span class=\"string\">&quot;beijing&quot;</span>, <span class=\"string\">&quot;location&quot;</span>, <span class=\"string\">&quot;cario&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初值列\"><a href=\"#初值列\" class=\"headerlink\" title=\"初值列\"></a>初值列</h3><p>即使某个local变量属于某种基础类型，也会被初始化为0或者nullptr（如果是个指针）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i;      <span class=\"comment\">// i has undefined value</span></span><br><span class=\"line\"><span class=\"type\">int</span> j&#123;&#125;;    <span class=\"comment\">// j is initalized by 0</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p;     <span class=\"comment\">// p has undefined value</span></span><br><span class=\"line\"><span class=\"type\">int</span> *q&#123;&#125;;   <span class=\"comment\">// j is initalized by nullptr</span></span><br></pre></td></tr></table></figure>\n<p>注意：窄化–精度降低或造成数值变动，对大括号而言是不成立的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">x1</span><span class=\"params\">(<span class=\"number\">5.3</span>)</span></span>;                            <span class=\"comment\">// ok, x1 -&gt; 5</span></span><br><span class=\"line\"><span class=\"type\">int</span> x2 = <span class=\"number\">5.3</span>;                           <span class=\"comment\">// ok, x2 -&gt; 5</span></span><br><span class=\"line\"><span class=\"type\">int</span> x3&#123;<span class=\"number\">5.0</span>&#125;;                            <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"type\">int</span> x4 = &#123;<span class=\"number\">5.0</span>&#125;;                         <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"type\">char</span> c1&#123;<span class=\"number\">7</span>&#125;;                             <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"type\">char</span> c2&#123;<span class=\"number\">99999</span>&#125;;                         <span class=\"comment\">// error</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;       <span class=\"comment\">// ok</span></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;       <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"std-initalizer-list-lt-gt\"><a href=\"#std-initalizer-list-lt-gt\" class=\"headerlink\" title=\"std::initalizer_list&lt;&gt;\"></a>std::initalizer_list&lt;&gt;</h3><p><code>initalizer_list&lt;&gt;</code>用来支持（a list of value）进行初始化 \\</p>\n<p>实例1：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(std::initalizer_list&lt;<span class=\"type\">int</span>&gt; vals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = vals.<span class=\"built_in\">begin</span>(); p != vals.<span class=\"built_in\">end</span>(); ++p) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; *p &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(&#123;<span class=\"number\">12</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>实例2：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(std::initalizer_list&lt;<span class=\"type\">int</span>&gt;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">P p&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// Calls P::P(int, int)</span></span><br><span class=\"line\">P q&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br><span class=\"line\">P r&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;     <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;  <span class=\"comment\">// Calls P::P(initalizer_list)</span></span><br></pre></td></tr></table></figure>\n\n<p>实例3：<br>explicit构造函数如果接受的是一个初值列，会失去初值列带有0个，1个，多个初值的能力</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">P</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">P</span><span class=\"params\">(std::initalizer_list&lt;<span class=\"type\">int</span>&gt;)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">P p&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// ok</span></span><br><span class=\"line\">P q&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;;         <span class=\"comment\">// ok</span></span><br><span class=\"line\">P r&#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;     <span class=\"comment\">// ok</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>&#125;;  <span class=\"comment\">// error</span></span><br><span class=\"line\">P s = &#123;<span class=\"number\">77</span>, <span class=\"number\">5</span>&#125;       <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-Range-Based-for循环（foreach循环）\"><a href=\"#1-5-Range-Based-for循环（foreach循环）\" class=\"headerlink\" title=\"1.5 Range-Based for循环（foreach循环）\"></a>1.5 Range-Based for循环（foreach循环）</h2><p>语法特性：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (decl : coll) &#123; <span class=\"comment\">// decl是给定值coll集合中每一个元素的声明</span></span><br><span class=\"line\">    statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>&#125;) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">double</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; elem : vec) &#123;</span><br><span class=\"line\">    elem *= <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印某集合内所有元素的泛型函数实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printElements</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; coll)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; elem : coll) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以针对初值列使用range-based for循环，因为class template std::initalizer_list&lt;&gt;提供了成员函数begin()和end()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> array[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : array) &#123;</span><br><span class=\"line\">    sum += x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> elem : &#123;sum, sum * <span class=\"number\">2</span>, sum * <span class=\"number\">4</span>&#125; &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1-6-move语义和左值引用\"><a href=\"#1-6-move语义和左值引用\" class=\"headerlink\" title=\"1.6 move语义和左值引用\"></a>1.6 move语义和左值引用</h2><p>###为何需要移动语义<br>假设有如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; vstr;</span><br><span class=\"line\"><span class=\"comment\">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy1</span><span class=\"params\">(vstr)</span></span>; <span class=\"comment\">// make vstr_copy1 a copy of vstr</span></span><br></pre></td></tr></table></figure>\n<p>vector和string类都使用了动态内存分配，因此它们必须定义某种new版本的复制构造函数，为初始化对象vstr_copy1，复制构造函数vector<string>将使用new给20000个string对象分配内存，而每个string对象又将调用string的复制构造函数，该构造函数使用new为1000个字符分配内存。接下来全部20000*1000个字符都将从vstr控制的内存中复制到vstr_copy1控制的内存中</p>\n<p>假设以下面方式使用它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; vstrl</span><br><span class=\"line\"><span class=\"comment\">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy1</span><span class=\"params\">(vstr)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">vstr_copy2</span><span class=\"params\">(allcaps(vstr))</span></span>;</span><br></pre></td></tr></table></figure>\n<p>从表面上看，两个复制一致，它们都使用了一个现有的对象初始化一个vector<string>对象，如果深入探索这些代码，将发现allcaps()创建了对象temp，该对象管理着20000<em>1000个字符，vector和string的复制构造函数创建这20000</em>1000个字符的副本，然后程序删除allcaps()返回临时对象。（这里做了很多无用功）</p>\n<h3 id=\"使用移动语义\"><a href=\"#使用移动语义\" class=\"headerlink\" title=\"使用移动语义\"></a>使用移动语义</h3><p>编译器对数据的所有权直接转让给vstr_copy2，不进行新的复制副本，在删除副本；而是将字符留在原来的地方，并将vstr_copy2与之相关联</p>\n<h3 id=\"如何实现移动语义\"><a href=\"#如何实现移动语义\" class=\"headerlink\" title=\"如何实现移动语义\"></a>如何实现移动语义</h3><p>使用右值引用，让编译器知道什么时候需要复制，什么时候不需要</p>\n<p>方法：使用移动构造函数，它使用右值引用作为参数，该引用关联到右值实参 <br>注意1：复制构造函数可执行深复制，而移动构造函数只调整记录 <br>注意2：在将所有权转移给新对象的过程中，移动构造函数可能修改其实参，这意味着右值引用参数不应该是const</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Useless</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">char</span> *pc;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> ct;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowObject</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Useless</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(<span class=\"type\">int</span> k, <span class=\"type\">char</span> ch);</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless &amp;f);</span><br><span class=\"line\">    <span class=\"built_in\">Useless</span>(Useless &amp;&amp;f);</span><br><span class=\"line\">    ~<span class=\"built_in\">Useless</span>();</span><br><span class=\"line\">    Useless <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Useless &amp;f) <span class=\"type\">const</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowData</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Useless::ct = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::Useless &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">int</span> k) : <span class=\"built_in\">n</span>(k) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] = ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(Useless&amp;&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = f.pc;</span><br><span class=\"line\">    f.pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] =  ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless::~<span class=\"built_in\">Useless</span>() &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;destructor called; objects left: &quot;</span> &lt;&lt; --ct &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;deleted object:\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowObject</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Useless Useless::<span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Useless&amp; f) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Entering operator+()\\n&quot;</span>;</span><br><span class=\"line\">    Useless temp = <span class=\"built_in\">Useless</span>(n + f.n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] =  ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; temp; i++) &#123;</span><br><span class=\"line\">        temp.pc[i] = f.pc[i - n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;temp object:\\n&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Leaving operator+()\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种构造函数比较</p>\n<p>复制构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pc[i] = ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>移动构造函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Useless::<span class=\"built_in\">Useless</span>(<span class=\"type\">const</span> Useless&amp;&amp; f) : <span class=\"built_in\">n</span>(f.n) &#123;</span><br><span class=\"line\">    ++ct;</span><br><span class=\"line\">    pc = f.pc;</span><br><span class=\"line\">    f.pc = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    f.n = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它让pc指向现有的数据，以获取这些数据的所有权，此时pc和f.pc指向相同的数据，调用析构函数时将带来麻烦，因为程序不能对同一个地址调用delete两次，为避免这个问题该构造函数将原来的指针设置为空指针（对空指针执行delete[]没有问题）</p>\n<p>由于修改了f对象，这要求不能在参数声明中使用const</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cli02uggh0005i8i9c8lab2p5","tag_id":"cli02uggl0008i8i99ddv29qy","_id":"cli02uggo000ci8i976cr1l0g"},{"post_id":"cli02uggk0007i8i9dwm683hq","tag_id":"cli02uggn000bi8i97b6weve9","_id":"cli02uggo000di8i9803x81ed"}],"Tag":[{"name":"hexo","_id":"cli02uggl0008i8i99ddv29qy"},{"name":"C++","_id":"cli02uggn000bi8i97b6weve9"}]}}