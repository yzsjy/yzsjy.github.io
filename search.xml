<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/23/hello-world/</url>
    <content><![CDATA[<h1 id="Hexo入门以及如何部署到Github"><a href="#Hexo入门以及如何部署到Github" class="headerlink" title="Hexo入门以及如何部署到Github"></a>Hexo入门以及如何部署到Github</h1><p>这篇文章主要介绍了如何在本地快速搭建Hexo框架下的博客以及如何将自己的博客部署到Github上。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>前提是本地已经安装了npm，然后最好在本地先新建一个文件夹，然后运行下面的命令安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>个人是在ubuntu系统下进行的操作，可能直接运行会安装失败，可以尝试在命令前添加sudo</p>
<h3 id="安装你的博客"><a href="#安装你的博客" class="headerlink" title="安装你的博客"></a>安装你的博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate 或者 hexo g</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>

<p>在启动服务后你就可以在你的浏览器中输入<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a> 来预览你的博客了</p>
<h3 id="清除文件"><a href="#清除文件" class="headerlink" title="清除文件"></a>清除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="创建新的博文"><a href="#创建新的博文" class="headerlink" title="创建新的博文"></a>创建新的博文</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;BlogName&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="进行自定义操作"><a href="#进行自定义操作" class="headerlink" title="进行自定义操作"></a>进行自定义操作</h2><h3 id="更换Hexo默认主题"><a href="#更换Hexo默认主题" class="headerlink" title="更换Hexo默认主题"></a>更换Hexo默认主题</h3><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>首先在Github上找到你所喜欢的主题的仓库，git clone主题仓库到你所创建博客的blog&#x2F;themes文件夹，在这里我选用的是star数最高的next主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>然后你可以进入到next文件夹下的_config.yml文件下修改参数以达到你想要的主题效果</p>
<h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>打开博客创建文件夹blog，找到_config.yml文件并打开，修改theme参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h2><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>在这里就不展开叙述了，在自己的github账号下创建一个用户名.github.io仓库，网上有很多教程。</p>
<h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开博客创建文件夹blog，找到_config.yml文件并打开，添加参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repository: https://github.com/用户名/用户名.github.io.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>

<h3 id="配置git用户名和邮箱"><a href="#配置git用户名和邮箱" class="headerlink" title="配置git用户名和邮箱"></a>配置git用户名和邮箱</h3><p>如果已经配置过，忽略这一步。打开git bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="部署博客到github-io仓库"><a href="#部署博客到github-io仓库" class="headerlink" title="部署博客到github.io仓库"></a>部署博客到github.io仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>期间会要求输入你的Github用户名和密码</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++STL</title>
    <url>/2023/05/23/C-STL/</url>
    <content><![CDATA[<h1 id="C-11-语言特性"><a href="#C-11-语言特性" class="headerlink" title="C++11 语言特性"></a>C++11 语言特性</h1><h2 id="1-1-nullptr和std-nullptr-t"><a href="#1-1-nullptr和std-nullptr-t" class="headerlink" title="1.1 nullptr和std::nullptr_t"></a>1.1 nullptr和std::nullptr_t</h2><p>C++11允许你使用nullptr取代0或者NULL，用来表示一个pointer（指针）指向no value。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">0</span>);           <span class="comment">// call f(int)</span></span><br><span class="line"><span class="built_in">f</span>(<span class="literal">NULL</span>);        <span class="comment">// call f(int) if NULL is 0 ambigous otherwise</span></span><br><span class="line"><span class="built_in">f</span>(<span class="literal">nullptr</span>);     <span class="comment">// call f(void*)</span></span><br></pre></td></tr></table></figure>
<p>nullptr会被自动转换成各种pointer类型，但不会被转换成任何整数类型</p>
<h2 id="1-2-以auto完成类型自动推导"><a href="#1-2-以auto完成类型自动推导" class="headerlink" title="1.2 以auto完成类型自动推导"></a>1.2 以auto完成类型自动推导</h2><h3 id="auto类型推导"><a href="#auto类型推导" class="headerlink" title="auto类型推导"></a>auto类型推导</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">5</span>;                 <span class="comment">// 正确，x是int类型</span></span><br><span class="line"><span class="keyword">auto</span> pi = <span class="keyword">new</span> <span class="built_in">auto</span>(<span class="number">1</span>);      <span class="comment">// 正确，p是int*</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span>* v = &amp;x, u = <span class="number">6</span>;  <span class="comment">// 正确，v是const int*类型，u是const int</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">auto</span> y = <span class="number">0.0</span>;        <span class="comment">// 正确，y是double类型</span></span><br><span class="line"><span class="keyword">auto</span> <span class="type">int</span> r;                 <span class="comment">// 错误，auto不在表示存储类型的指示符</span></span><br><span class="line"><span class="keyword">auto</span> s;                     <span class="comment">// 错误，auto无法推导出s的类型（必须马上初始化）</span></span><br></pre></td></tr></table></figure>
<p>auto并不能代表一个实际的类型声明（上面s编译错误），只是一个声明类型的“占位符”。使用auto声明的变量必须马上初始化，让编译器推断出它的类型，并且在编译时将auto占位符替换成真正的类型。</p>
<h3 id="auto推导规则"><a href="#auto推导规则" class="headerlink" title="auto推导规则"></a>auto推导规则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> *a = &amp;x;           <span class="comment">// a -&gt; int*，a被推导为int*</span></span><br><span class="line"><span class="keyword">auto</span> b = &amp;x;            <span class="comment">// b -&gt; int，b被推导为int，忽略了引用</span></span><br><span class="line"><span class="keyword">auto</span> &amp;c = x;            <span class="comment">// c -&gt; int&amp;，c被推导为int&amp;</span></span><br><span class="line"><span class="keyword">auto</span> d = c;             <span class="comment">// d -&gt; int，d被推导为int，忽略了引用</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> e = x;       <span class="comment">// e -&gt; const int</span></span><br><span class="line"><span class="keyword">auto</span> f = e;             <span class="comment">// f -&gt; int</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span>&amp; g = x;      <span class="comment">// g -&gt; const int&amp;</span></span><br><span class="line"><span class="keyword">auto</span>&amp; h = g;            <span class="comment">// h -&gt; const int&amp;</span></span><br></pre></td></tr></table></figure>
<p>在不声明为引用或者指针时，auto会忽略等号右边的引用类型和const限定<br>在声明为引用或者指针时，auto会保留等号右边的引用和const属性</p>
<h3 id="auto的限制"><a href="#auto的限制" class="headerlink" title="auto的限制"></a>auto的限制</h3><ol>
<li>auto的使用必须马上初始化，否则无法推导出类型</li>
<li>auto在一行定义多个变量时，各个变量不能产生二义性，否则编译失败</li>
<li>auto不能用作函数的参数</li>
<li>在类中auto不能用作非静态成员变量</li>
<li>auto不能定义数组，可以定义指针</li>
<li>auto无法推断出模板参数</li>
</ol>
<h2 id="1-3-decltype用于推导表达式类型"><a href="#1-3-decltype用于推导表达式类型" class="headerlink" title="1.3 decltype用于推导表达式类型"></a>1.3 decltype用于推导表达式类型</h2><p>decltype用于推导表达式类型，这里只用于编译器分析表达式的类型，表达式实际不会进行运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">func</span>()) i;     <span class="comment">// i为int类型</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x) y;          <span class="comment">// y为int类型</span></span><br><span class="line"><span class="keyword">decltype</span>(x + y) z;      <span class="comment">// z为int类型</span></span><br></pre></td></tr></table></figure>
<p>注意：decltype不会像auto一样忽略引用和const属性，decltype会保留表达式引用和cv属性</p>
<h3 id="decltype推导规则"><a href="#decltype推导规则" class="headerlink" title="decltype推导规则"></a>decltype推导规则</h3><ol>
<li>exp是表达式，decltype(exp)和exp类型相同</li>
<li>exp是函数调用，decltype(exp)和函数返回值类型相同</li>
<li>其他情况，若exp是左值，decltype(exp)是exp的左值引用</li>
</ol>
<h3 id="auto和decltype配合使用"><a href="#auto和decltype配合使用" class="headerlink" title="auto和decltype配合使用"></a>auto和decltype配合使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">return_value <span class="title">add</span><span class="params">(T t, U u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// t和u类型不确定，无法推导出return_value类型</span></span><br><span class="line">    <span class="keyword">return</span> t + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改进为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-一致性初始化与初值列"><a href="#1-4-一致性初始化与初值列" class="headerlink" title="1.4 一致性初始化与初值列"></a>1.4 一致性初始化与初值列</h2><h3 id="一致性初始化"><a href="#一致性初始化" class="headerlink" title="一致性初始化"></a>一致性初始化</h3><p>面对任何初始化动作，可以用大括号进行初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> values[] &#123;<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; v &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>&#125;;</span><br><span class="line">std::vector&lt;std::string&gt; cities &#123;<span class="string">&quot;beijing&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;cario&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="初值列"><a href="#初值列" class="headerlink" title="初值列"></a>初值列</h3><p>即使某个local变量属于某种基础类型，也会被初始化为0或者nullptr（如果是个指针）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;      <span class="comment">// i has undefined value</span></span><br><span class="line"><span class="type">int</span> j&#123;&#125;;    <span class="comment">// j is initalized by 0</span></span><br><span class="line"><span class="type">int</span> *p;     <span class="comment">// p has undefined value</span></span><br><span class="line"><span class="type">int</span> *q&#123;&#125;;   <span class="comment">// j is initalized by nullptr</span></span><br></pre></td></tr></table></figure>
<p>注意：窄化–精度降低或造成数值变动，对大括号而言是不成立的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">x1</span><span class="params">(<span class="number">5.3</span>)</span></span>;                            <span class="comment">// ok, x1 -&gt; 5</span></span><br><span class="line"><span class="type">int</span> x2 = <span class="number">5.3</span>;                           <span class="comment">// ok, x2 -&gt; 5</span></span><br><span class="line"><span class="type">int</span> x3&#123;<span class="number">5.0</span>&#125;;                            <span class="comment">// error</span></span><br><span class="line"><span class="type">int</span> x4 = &#123;<span class="number">5.0</span>&#125;;                         <span class="comment">// error</span></span><br><span class="line"><span class="type">char</span> c1&#123;<span class="number">7</span>&#125;;                             <span class="comment">// ok</span></span><br><span class="line"><span class="type">char</span> c2&#123;<span class="number">99999</span>&#125;;                         <span class="comment">// error</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;       <span class="comment">// ok</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;       <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h3 id="std-initalizer-list-lt-gt"><a href="#std-initalizer-list-lt-gt" class="headerlink" title="std::initalizer_list&lt;&gt;"></a>std::initalizer_list&lt;&gt;</h3><p><code>initalizer_list&lt;&gt;</code>用来支持（a list of value）进行初始化 \</p>
<p>实例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(std::initalizer_list&lt;<span class="type">int</span>&gt; vals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p = vals.<span class="built_in">begin</span>(); p != vals.<span class="built_in">end</span>(); ++p) &#123;</span><br><span class="line">        std::cout &lt;&lt; *p &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>实例2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">P</span>(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="built_in">P</span>(std::initalizer_list&lt;<span class="type">int</span>&gt;);</span><br><span class="line">&#125;;</span><br><span class="line">P p&#123;<span class="number">77</span>, <span class="number">5</span>&#125;;         <span class="comment">// Calls P::P(int, int)</span></span><br><span class="line">P q&#123;<span class="number">77</span>, <span class="number">5</span>&#125;;         <span class="comment">// Calls P::P(initalizer_list)</span></span><br><span class="line">P r&#123;<span class="number">77</span>, <span class="number">5</span>, <span class="number">42</span>&#125;;     <span class="comment">// Calls P::P(initalizer_list)</span></span><br><span class="line">P s = &#123;<span class="number">77</span>, <span class="number">5</span>, <span class="number">42</span>&#125;;  <span class="comment">// Calls P::P(initalizer_list)</span></span><br></pre></td></tr></table></figure>

<p>实例3：<br>explicit构造函数如果接受的是一个初值列，会失去初值列带有0个，1个，多个初值的能力</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">P</span>(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">P</span><span class="params">(std::initalizer_list&lt;<span class="type">int</span>&gt;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">P p&#123;<span class="number">77</span>, <span class="number">5</span>&#125;;         <span class="comment">// ok</span></span><br><span class="line">P q&#123;<span class="number">77</span>, <span class="number">5</span>&#125;;         <span class="comment">// ok</span></span><br><span class="line">P r&#123;<span class="number">77</span>, <span class="number">5</span>, <span class="number">42</span>&#125;;     <span class="comment">// ok</span></span><br><span class="line">P s = &#123;<span class="number">77</span>, <span class="number">5</span>, <span class="number">42</span>&#125;;  <span class="comment">// error</span></span><br><span class="line">P s = &#123;<span class="number">77</span>, <span class="number">5</span>&#125;       <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-Range-Based-for循环（foreach循环）"><a href="#1-5-Range-Based-for循环（foreach循环）" class="headerlink" title="1.5 Range-Based for循环（foreach循环）"></a>1.5 Range-Based for循环（foreach循环）</h2><p>语法特性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (decl : coll) &#123; <span class="comment">// decl是给定值coll集合中每一个元素的声明</span></span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;) &#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : vec) &#123;</span><br><span class="line">    elem *= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印某集合内所有元素的泛型函数实例</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printElements</span><span class="params">(<span class="type">const</span> T&amp; coll)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : coll) &#123;</span><br><span class="line">        std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以针对初值列使用range-based for循环，因为class template std::initalizer_list&lt;&gt;提供了成员函数begin()和end()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> array[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : array) &#123;</span><br><span class="line">    sum += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> elem : &#123;sum, sum * <span class="number">2</span>, sum * <span class="number">4</span>&#125; &#123;</span><br><span class="line">    std::cout &lt;&lt; elem &lt;&lt; std::endl;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="1-6-move语义和左值引用"><a href="#1-6-move语义和左值引用" class="headerlink" title="1.6 move语义和左值引用"></a>1.6 move语义和左值引用</h2><p>###为何需要移动语义<br>假设有如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; vstr;</span><br><span class="line"><span class="comment">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class="line">...</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy1</span><span class="params">(vstr)</span></span>; <span class="comment">// make vstr_copy1 a copy of vstr</span></span><br></pre></td></tr></table></figure>
<p>vector和string类都使用了动态内存分配，因此它们必须定义某种new版本的复制构造函数，为初始化对象vstr_copy1，复制构造函数vector<string>将使用new给20000个string对象分配内存，而每个string对象又将调用string的复制构造函数，该构造函数使用new为1000个字符分配内存。接下来全部20000*1000个字符都将从vstr控制的内存中复制到vstr_copy1控制的内存中</p>
<p>假设以下面方式使用它：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; vstrl</span><br><span class="line"><span class="comment">// build up a vector of 20,000 strings, each of 1000 characters</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy1</span><span class="params">(vstr)</span></span>;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy2</span><span class="params">(allcaps(vstr))</span></span>;</span><br></pre></td></tr></table></figure>
<p>从表面上看，两个复制一致，它们都使用了一个现有的对象初始化一个vector<string>对象，如果深入探索这些代码，将发现allcaps()创建了对象temp，该对象管理着20000<em>1000个字符，vector和string的复制构造函数创建这20000</em>1000个字符的副本，然后程序删除allcaps()返回临时对象。（这里做了很多无用功）</p>
<h3 id="使用移动语义"><a href="#使用移动语义" class="headerlink" title="使用移动语义"></a>使用移动语义</h3><p>编译器对数据的所有权直接转让给vstr_copy2，不进行新的复制副本，在删除副本；而是将字符留在原来的地方，并将vstr_copy2与之相关联</p>
<h3 id="如何实现移动语义"><a href="#如何实现移动语义" class="headerlink" title="如何实现移动语义"></a>如何实现移动语义</h3><p>使用右值引用，让编译器知道什么时候需要复制，什么时候不需要</p>
<p>方法：使用移动构造函数，它使用右值引用作为参数，该引用关联到右值实参 <br>注意1：复制构造函数可执行深复制，而移动构造函数只调整记录 <br>注意2：在将所有权转移给新对象的过程中，移动构造函数可能修改其实参，这意味着右值引用参数不应该是const</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Useless</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> *pc;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ct;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowObject</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Useless</span>();</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Useless</span><span class="params">(<span class="type">int</span> k)</span></span>;</span><br><span class="line">    <span class="built_in">Useless</span>(<span class="type">int</span> k, <span class="type">char</span> ch);</span><br><span class="line">    <span class="built_in">Useless</span>(<span class="type">const</span> Useless &amp;f);</span><br><span class="line">    <span class="built_in">Useless</span>(Useless &amp;&amp;f);</span><br><span class="line">    ~<span class="built_in">Useless</span>();</span><br><span class="line">    Useless <span class="keyword">operator</span>+(<span class="type">const</span> Useless &amp;f) <span class="type">const</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowData</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Useless::ct = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Useless::Useless &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    pc = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">ShowObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Useless::<span class="built_in">Useless</span>(<span class="type">int</span> k) : <span class="built_in">n</span>(k) &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    pc = <span class="keyword">new</span> <span class="type">char</span>[n];</span><br><span class="line">    <span class="built_in">ShowObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Useless::<span class="built_in">Useless</span>(<span class="type">const</span> Useless&amp; f) : <span class="built_in">n</span>(f.n) &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    pc = <span class="keyword">new</span> <span class="type">char</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pc[i] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ShowObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Useless::<span class="built_in">Useless</span>(Useless&amp;&amp; f) : <span class="built_in">n</span>(f.n) &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    pc = f.pc;</span><br><span class="line">    f.pc = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pc[i] =  ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ShowObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Useless::~<span class="built_in">Useless</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;destructor called; objects left: &quot;</span> &lt;&lt; --ct &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;deleted object:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">ShowObject</span>();</span><br><span class="line">    <span class="keyword">delete</span> []pc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Useless Useless::<span class="keyword">operator</span>+(<span class="type">const</span> Useless&amp; f) <span class="type">const</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Entering operator+()\n&quot;</span>;</span><br><span class="line">    Useless temp = <span class="built_in">Useless</span>(n + f.n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pc[i] =  ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temp; i++) &#123;</span><br><span class="line">        temp.pc[i] = f.pc[i - n];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;temp object:\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Leaving operator+()\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种构造函数比较</p>
<p>复制构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Useless::<span class="built_in">Useless</span>(<span class="type">const</span> Useless&amp; f) : <span class="built_in">n</span>(f.n) &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    pc = <span class="keyword">new</span> <span class="type">char</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pc[i] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动构造函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Useless::<span class="built_in">Useless</span>(<span class="type">const</span> Useless&amp;&amp; f) : <span class="built_in">n</span>(f.n) &#123;</span><br><span class="line">    ++ct;</span><br><span class="line">    pc = f.pc;</span><br><span class="line">    f.pc = <span class="literal">nullptr</span>;</span><br><span class="line">    f.n = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它让pc指向现有的数据，以获取这些数据的所有权，此时pc和f.pc指向相同的数据，调用析构函数时将带来麻烦，因为程序不能对同一个地址调用delete两次，为避免这个问题该构造函数将原来的指针设置为空指针（对空指针执行delete[]没有问题）</p>
<p>由于修改了f对象，这要求不能在参数声明中使用const</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
